# Generated by Django 4.2.24 on 2025-09-19 17:08

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customers', '0002_add_purchase_order_models'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GoldInstallmentContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('contract_number', models.CharField(help_text='Unique contract identifier', max_length=50, unique=True, verbose_name='Contract Number')),
                ('contract_date', models.DateField(verbose_name='Contract Date (Gregorian)')),
                ('contract_date_shamsi', models.CharField(help_text='Format: 1403/01/01', max_length=10, verbose_name='Contract Date (Shamsi)')),
                ('initial_gold_weight_grams', models.DecimalField(decimal_places=3, help_text='Total gold weight at contract start', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='Initial Gold Weight (Grams)')),
                ('remaining_gold_weight_grams', models.DecimalField(decimal_places=3, help_text='Current outstanding gold weight', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.000'))], verbose_name='Remaining Gold Weight (Grams)')),
                ('gold_karat', models.IntegerField(default=18, help_text='Gold purity level', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(24)], verbose_name='Gold Karat (عیار)')),
                ('payment_schedule', models.CharField(choices=[('weekly', 'Weekly'), ('bi_weekly', 'Bi-weekly'), ('monthly', 'Monthly'), ('custom', 'Custom Schedule')], default='monthly', max_length=20, verbose_name='Payment Schedule')),
                ('payment_amount_per_period', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed payment amount if applicable', max_digits=12, null=True, verbose_name='Payment Amount per Period (Toman)')),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('defaulted', 'Defaulted'), ('cancelled', 'Cancelled'), ('suspended', 'Suspended')], default='active', max_length=20, verbose_name='Contract Status')),
                ('balance_type', models.CharField(choices=[('debt', 'Customer Owes Gold'), ('credit', 'Shop Owes Customer')], default='debt', help_text='Whether customer owes gold or shop owes customer', max_length=10, verbose_name='Balance Type')),
                ('has_price_protection', models.BooleanField(default=False, help_text='Whether contract has price ceiling/floor protection', verbose_name='Has Price Protection')),
                ('price_ceiling_per_gram', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum gold price for calculations', max_digits=12, null=True, verbose_name='Price Ceiling per Gram (Toman)')),
                ('price_floor_per_gram', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum gold price for calculations', max_digits=12, null=True, verbose_name='Price Floor per Gram (Toman)')),
                ('early_payment_discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage for early contract completion', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('50.00'))], verbose_name='Early Payment Discount (%)')),
                ('contract_terms_persian', models.TextField(help_text='Persian legal terms and conditions', verbose_name='Contract Terms (Persian)')),
                ('special_conditions', models.TextField(blank=True, help_text='Additional contract-specific conditions', verbose_name='Special Conditions')),
                ('completion_date', models.DateField(blank=True, null=True, verbose_name='Completion Date')),
                ('total_payments_received', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='Total Payments Received (Toman)')),
                ('total_gold_weight_paid', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=10, verbose_name='Total Gold Weight Paid (Grams)')),
                ('internal_notes', models.TextField(blank=True, verbose_name='Internal Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='gold_installment_contracts', to='customers.customer', verbose_name='Customer')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Gold Installment Contract',
                'verbose_name_plural': 'Gold Installment Contracts',
                'ordering': ['-contract_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GoldWeightAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('adjustment_date', models.DateField(verbose_name='Adjustment Date')),
                ('adjustment_date_shamsi', models.CharField(max_length=10, verbose_name='Adjustment Date (Shamsi)')),
                ('weight_before_grams', models.DecimalField(decimal_places=3, help_text='Gold weight before this adjustment', max_digits=10, verbose_name='Weight Before Adjustment (Grams)')),
                ('adjustment_amount_grams', models.DecimalField(decimal_places=3, help_text='Positive for increase, negative for decrease', max_digits=10, verbose_name='Adjustment Amount (Grams)')),
                ('weight_after_grams', models.DecimalField(decimal_places=3, help_text='Gold weight after this adjustment', max_digits=10, verbose_name='Weight After Adjustment (Grams)')),
                ('adjustment_type', models.CharField(choices=[('increase', 'Increase Balance'), ('decrease', 'Decrease Balance'), ('correction', 'Correction'), ('penalty', 'Penalty'), ('bonus', 'Bonus'), ('transfer', 'Transfer')], max_length=20, verbose_name='Adjustment Type')),
                ('adjustment_reason', models.CharField(choices=[('data_entry_error', 'Data Entry Error'), ('calculation_error', 'Calculation Error'), ('customer_dispute', 'Customer Dispute Resolution'), ('system_migration', 'System Migration'), ('policy_change', 'Policy Change'), ('goodwill', 'Goodwill Gesture'), ('penalty_application', 'Penalty Application'), ('bonus_application', 'Bonus Application'), ('other', 'Other')], max_length=30, verbose_name='Adjustment Reason')),
                ('description', models.TextField(help_text='Detailed description of the adjustment', verbose_name='Description')),
                ('supporting_documents', models.TextField(blank=True, help_text='References to supporting documentation', verbose_name='Supporting Documents')),
                ('authorization_notes', models.TextField(blank=True, verbose_name='Authorization Notes')),
                ('is_reversed', models.BooleanField(default=False, help_text='Whether this adjustment has been reversed', verbose_name='Is Reversed')),
                ('reversal_date', models.DateTimeField(blank=True, null=True, verbose_name='Reversal Date')),
                ('reversal_reason', models.TextField(blank=True, verbose_name='Reversal Reason')),
                ('authorized_by', models.ForeignKey(help_text='User who authorized this adjustment', on_delete=django.db.models.deletion.PROTECT, related_name='authorized_adjustments', to=settings.AUTH_USER_MODEL, verbose_name='Authorized By')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weight_adjustments', to='gold_installments.goldinstallmentcontract', verbose_name='Gold Installment Contract')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('related_adjustment', models.ForeignKey(blank=True, help_text='Original adjustment if this is a reversal', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gold_installments.goldweightadjustment', verbose_name='Related Adjustment')),
                ('reversed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reversed_adjustments', to=settings.AUTH_USER_MODEL, verbose_name='Reversed By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Gold Weight Adjustment',
                'verbose_name_plural': 'Gold Weight Adjustments',
                'ordering': ['-adjustment_date', '-created_at'],
                'indexes': [models.Index(fields=['contract'], name='gold_instal_contrac_87b156_idx'), models.Index(fields=['adjustment_date'], name='gold_instal_adjustm_77fe7f_idx'), models.Index(fields=['adjustment_type'], name='gold_instal_adjustm_be9464_idx'), models.Index(fields=['authorized_by'], name='gold_instal_authori_b51000_idx'), models.Index(fields=['is_reversed'], name='gold_instal_is_reve_d2cf86_idx')],
            },
        ),
        migrations.CreateModel(
            name='GoldInstallmentPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('payment_date', models.DateField(verbose_name='Payment Date')),
                ('payment_date_shamsi', models.CharField(help_text='Format: 1403/01/01', max_length=10, verbose_name='Payment Date (Shamsi)')),
                ('payment_amount_toman', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Payment Amount (Toman)')),
                ('gold_price_per_gram_at_payment', models.DecimalField(decimal_places=2, help_text='Market gold price at time of payment', max_digits=12, verbose_name='Gold Price per Gram at Payment (Toman)')),
                ('effective_gold_price_per_gram', models.DecimalField(decimal_places=2, help_text='Actual price used for calculation (after price protection)', max_digits=12, verbose_name='Effective Gold Price per Gram (Toman)')),
                ('gold_weight_equivalent_grams', models.DecimalField(decimal_places=3, help_text='Gold weight equivalent of payment amount', max_digits=10, verbose_name='Gold Weight Equivalent (Grams)')),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('bank_transfer', 'Bank Transfer'), ('card', 'Card Payment'), ('cheque', 'Cheque'), ('gold_exchange', 'Gold Exchange'), ('other', 'Other')], default='cash', max_length=20, verbose_name='Payment Method')),
                ('payment_type', models.CharField(choices=[('regular', 'Regular Payment'), ('early_completion', 'Early Completion'), ('partial', 'Partial Payment'), ('adjustment', 'Manual Adjustment')], default='regular', max_length=20, verbose_name='Payment Type')),
                ('reference_number', models.CharField(blank=True, help_text='Bank reference, cheque number, etc.', max_length=100, verbose_name='Reference Number')),
                ('discount_applied', models.BooleanField(default=False, verbose_name='Discount Applied')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, verbose_name='Discount Percentage')),
                ('discount_amount_toman', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Discount Amount (Toman)')),
                ('payment_notes', models.TextField(blank=True, verbose_name='Payment Notes')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='gold_installments.goldinstallmentcontract', verbose_name='Gold Installment Contract')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Gold Installment Payment',
                'verbose_name_plural': 'Gold Installment Payments',
                'ordering': ['-payment_date', '-created_at'],
                'indexes': [models.Index(fields=['contract'], name='gold_instal_contrac_e10741_idx'), models.Index(fields=['payment_date'], name='gold_instal_payment_9e4f0c_idx'), models.Index(fields=['payment_method'], name='gold_instal_payment_eb2fc1_idx'), models.Index(fields=['payment_type'], name='gold_instal_payment_cf4edd_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='goldinstallmentcontract',
            index=models.Index(fields=['contract_number'], name='gold_instal_contrac_9db2bd_idx'),
        ),
        migrations.AddIndex(
            model_name='goldinstallmentcontract',
            index=models.Index(fields=['customer'], name='gold_instal_custome_33ad55_idx'),
        ),
        migrations.AddIndex(
            model_name='goldinstallmentcontract',
            index=models.Index(fields=['status'], name='gold_instal_status_4dad76_idx'),
        ),
        migrations.AddIndex(
            model_name='goldinstallmentcontract',
            index=models.Index(fields=['contract_date'], name='gold_instal_contrac_290b09_idx'),
        ),
        migrations.AddIndex(
            model_name='goldinstallmentcontract',
            index=models.Index(fields=['balance_type'], name='gold_instal_balance_216691_idx'),
        ),
    ]
