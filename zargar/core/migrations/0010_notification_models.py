# Generated by Django 4.2.24 on 2025-09-22 08:15

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0009_backupschedule_backuprecord_backupintegritycheck'),
    ]

    operations = [
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('notification_id', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='Notification ID')),
                ('recipient_type', models.CharField(default='customer', help_text='customer, user, supplier, etc.', max_length=20, verbose_name='Recipient Type')),
                ('recipient_id', models.PositiveIntegerField(verbose_name='Recipient ID')),
                ('recipient_name', models.CharField(max_length=200, verbose_name='Recipient Name')),
                ('recipient_phone', models.CharField(blank=True, max_length=15, verbose_name='Recipient Phone')),
                ('recipient_email', models.EmailField(blank=True, max_length=254, verbose_name='Recipient Email')),
                ('title', models.CharField(max_length=200, verbose_name='Message Title')),
                ('content', models.TextField(verbose_name='Message Content')),
                ('delivery_method', models.CharField(choices=[('sms', 'SMS'), ('email', 'Email'), ('push', 'Push Notification'), ('whatsapp', 'WhatsApp')], max_length=20, verbose_name='Delivery Method')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10, verbose_name='Priority')),
                ('scheduled_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Scheduled At')),
                ('send_after', models.DateTimeField(blank=True, help_text='Do not send before this time', null=True, verbose_name='Send After')),
                ('expires_at', models.DateTimeField(blank=True, help_text='Do not send after this time', null=True, verbose_name='Expires At')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('queued', 'Queued'), ('sending', 'Sending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='Status')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Sent At')),
                ('delivered_at', models.DateTimeField(blank=True, null=True, verbose_name='Delivered At')),
                ('failed_at', models.DateTimeField(blank=True, null=True, verbose_name='Failed At')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('retry_count', models.PositiveIntegerField(default=0, verbose_name='Retry Count')),
                ('max_retries', models.PositiveIntegerField(default=3, verbose_name='Max Retries')),
                ('provider_response', models.JSONField(blank=True, default=dict, help_text='Response from SMS/Email provider', verbose_name='Provider Response')),
                ('provider_message_id', models.CharField(blank=True, max_length=200, verbose_name='Provider Message ID')),
                ('context_data', models.JSONField(blank=True, default=dict, help_text='Additional data used for template rendering', verbose_name='Context Data')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationDeliveryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('action', models.CharField(help_text='queued, sent, delivered, failed, etc.', max_length=50, verbose_name='Action')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Timestamp')),
                ('provider_name', models.CharField(blank=True, max_length=100, verbose_name='Provider Name')),
                ('provider_response', models.JSONField(blank=True, default=dict, verbose_name='Provider Response')),
                ('success', models.BooleanField(default=True, verbose_name='Success')),
                ('error_code', models.CharField(blank=True, max_length=50, verbose_name='Error Code')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Metadata')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_logs', to='core.notification', verbose_name='Notification')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Notification Delivery Log',
                'verbose_name_plural': 'Notification Delivery Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='NotificationProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(max_length=100, verbose_name='Provider Name')),
                ('provider_type', models.CharField(choices=[('sms', 'SMS Provider'), ('email', 'Email Provider'), ('push', 'Push Notification Provider'), ('whatsapp', 'WhatsApp Provider')], max_length=20, verbose_name='Provider Type')),
                ('api_endpoint', models.URLField(blank=True, verbose_name='API Endpoint')),
                ('api_key', models.CharField(blank=True, max_length=200, verbose_name='API Key')),
                ('api_secret', models.CharField(blank=True, max_length=200, verbose_name='API Secret')),
                ('settings', models.JSONField(default=dict, help_text='Additional provider-specific settings', verbose_name='Provider Settings')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_default', models.BooleanField(default=False, verbose_name='Is Default Provider')),
                ('rate_limit_per_minute', models.PositiveIntegerField(blank=True, null=True, verbose_name='Rate Limit Per Minute')),
                ('rate_limit_per_hour', models.PositiveIntegerField(blank=True, null=True, verbose_name='Rate Limit Per Hour')),
                ('rate_limit_per_day', models.PositiveIntegerField(blank=True, null=True, verbose_name='Rate Limit Per Day')),
                ('total_sent', models.PositiveIntegerField(default=0, verbose_name='Total Sent')),
                ('total_delivered', models.PositiveIntegerField(default=0, verbose_name='Total Delivered')),
                ('total_failed', models.PositiveIntegerField(default=0, verbose_name='Total Failed')),
                ('cost_per_message', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True, verbose_name='Cost Per Message (Toman)')),
                ('total_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Total Cost (Toman)')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Notification Provider',
                'verbose_name_plural': 'Notification Providers',
            },
        ),
        migrations.CreateModel(
            name='NotificationSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(max_length=200, verbose_name='Schedule Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('schedule_type', models.CharField(choices=[('one_time', 'One Time'), ('recurring', 'Recurring'), ('conditional', 'Conditional')], default='one_time', max_length=20, verbose_name='Schedule Type')),
                ('start_date', models.DateTimeField(verbose_name='Start Date')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='End Date')),
                ('recurrence_pattern', models.CharField(blank=True, choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], max_length=20, verbose_name='Recurrence Pattern')),
                ('recurrence_interval', models.PositiveIntegerField(default=1, help_text='Every X days/weeks/months', verbose_name='Recurrence Interval')),
                ('target_criteria', models.JSONField(default=dict, help_text='JSON criteria for selecting recipients', verbose_name='Target Criteria')),
                ('delivery_methods', models.JSONField(default=list, verbose_name='Delivery Methods')),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='active', max_length=20, verbose_name='Status')),
                ('total_sent', models.PositiveIntegerField(default=0, verbose_name='Total Sent')),
                ('total_delivered', models.PositiveIntegerField(default=0, verbose_name='Total Delivered')),
                ('total_failed', models.PositiveIntegerField(default=0, verbose_name='Total Failed')),
                ('last_run_at', models.DateTimeField(blank=True, null=True, verbose_name='Last Run At')),
                ('next_run_at', models.DateTimeField(blank=True, null=True, verbose_name='Next Run At')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Notification Schedule',
                'verbose_name_plural': 'Notification Schedules',
            },
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(max_length=200, verbose_name='Template Name')),
                ('template_type', models.CharField(choices=[('payment_reminder', 'Payment Reminder'), ('payment_overdue', 'Payment Overdue'), ('payment_confirmation', 'Payment Confirmation'), ('appointment_reminder', 'Appointment Reminder'), ('birthday_greeting', 'Birthday Greeting'), ('anniversary_greeting', 'Anniversary Greeting'), ('special_offer', 'Special Offer'), ('contract_expiry', 'Contract Expiry'), ('welcome_message', 'Welcome Message'), ('custom', 'Custom Template')], max_length=30, verbose_name='Template Type')),
                ('title', models.CharField(help_text='Title for email/push notifications', max_length=200, verbose_name='Message Title')),
                ('content', models.TextField(help_text='Persian message template with variables: {customer_name}, {amount}, {date}, etc.', verbose_name='Message Content')),
                ('delivery_methods', models.JSONField(default=list, help_text='List of delivery methods: sms, email, push, whatsapp', verbose_name='Delivery Methods')),
                ('available_variables', models.JSONField(default=dict, help_text='Dictionary of available template variables and their descriptions', verbose_name='Available Variables')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_default', models.BooleanField(default=False, help_text='Default template for this type', verbose_name='Is Default Template')),
                ('usage_count', models.PositiveIntegerField(default=0, verbose_name='Usage Count')),
                ('last_used_at', models.DateTimeField(blank=True, null=True, verbose_name='Last Used At')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Notification Template',
                'verbose_name_plural': 'Notification Templates',
            },
        ),
        migrations.RemoveField(
            model_name='backupintegritycheck',
            name='backup_record',
        ),
        migrations.DeleteModel(
            name='BackupSchedule',
        ),
        migrations.DeleteModel(
            name='BackupIntegrityCheck',
        ),
        migrations.DeleteModel(
            name='BackupRecord',
        ),
        migrations.AddField(
            model_name='notificationschedule',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='core.notificationtemplate', verbose_name='Notification Template'),
        ),
        migrations.AddField(
            model_name='notificationschedule',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='notification',
            name='schedule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications', to='core.notificationschedule', verbose_name='Schedule'),
        ),
        migrations.AddField(
            model_name='notification',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications', to='core.notificationtemplate', verbose_name='Template Used'),
        ),
        migrations.AddField(
            model_name='notification',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddIndex(
            model_name='notificationtemplate',
            index=models.Index(fields=['template_type'], name='core_notifi_templat_648e1f_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationtemplate',
            index=models.Index(fields=['is_active'], name='core_notifi_is_acti_38ce27_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationtemplate',
            index=models.Index(fields=['is_default'], name='core_notifi_is_defa_292d6f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='notificationtemplate',
            unique_together={('template_type', 'is_default')},
        ),
        migrations.AddIndex(
            model_name='notificationschedule',
            index=models.Index(fields=['status'], name='core_notifi_status_ef17fe_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationschedule',
            index=models.Index(fields=['next_run_at'], name='core_notifi_next_ru_e0f9bf_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationschedule',
            index=models.Index(fields=['schedule_type'], name='core_notifi_schedul_51672a_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationprovider',
            index=models.Index(fields=['provider_type'], name='core_notifi_provide_76dc8f_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationprovider',
            index=models.Index(fields=['is_active'], name='core_notifi_is_acti_42e452_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationprovider',
            index=models.Index(fields=['is_default'], name='core_notifi_is_defa_4e95d9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='notificationprovider',
            unique_together={('provider_type', 'is_default')},
        ),
        migrations.AddIndex(
            model_name='notificationdeliverylog',
            index=models.Index(fields=['notification'], name='core_notifi_notific_0c8997_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationdeliverylog',
            index=models.Index(fields=['action'], name='core_notifi_action_fed894_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationdeliverylog',
            index=models.Index(fields=['timestamp'], name='core_notifi_timesta_42b6eb_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationdeliverylog',
            index=models.Index(fields=['success'], name='core_notifi_success_603de9_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['status'], name='core_notifi_status_7f445c_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['delivery_method'], name='core_notifi_deliver_6f3e2b_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['scheduled_at'], name='core_notifi_schedul_340655_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['recipient_type', 'recipient_id'], name='core_notifi_recipie_6a59f5_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['priority'], name='core_notifi_priorit_8208cb_idx'),
        ),
    ]
