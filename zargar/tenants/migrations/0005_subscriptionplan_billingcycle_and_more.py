# Generated by Django 4.2.24 on 2025-09-20 12:40

from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('tenants', '0004_tenantaccesslog_alter_superadminsession_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Plan Name')),
                ('name_persian', models.CharField(help_text='Plan name in Persian for Iranian market', max_length=100, verbose_name='Persian Plan Name')),
                ('plan_type', models.CharField(choices=[('basic', 'Basic Plan'), ('pro', 'Pro Plan'), ('enterprise', 'Enterprise Plan')], max_length=20, unique=True, verbose_name='Plan Type')),
                ('monthly_price_toman', models.DecimalField(decimal_places=2, help_text='Monthly subscription price in Iranian Toman', max_digits=12, verbose_name='Monthly Price (Toman)')),
                ('yearly_price_toman', models.DecimalField(blank=True, decimal_places=2, help_text='Yearly subscription price in Iranian Toman (optional discount)', max_digits=12, null=True, verbose_name='Yearly Price (Toman)')),
                ('max_users', models.PositiveIntegerField(help_text='Maximum number of users allowed in this plan', verbose_name='Maximum Users')),
                ('max_inventory_items', models.PositiveIntegerField(help_text='Maximum number of jewelry items in inventory', verbose_name='Maximum Inventory Items')),
                ('max_customers', models.PositiveIntegerField(help_text='Maximum number of customers in database', verbose_name='Maximum Customers')),
                ('max_monthly_transactions', models.PositiveIntegerField(help_text='Maximum number of transactions per month', verbose_name='Maximum Monthly Transactions')),
                ('max_storage_gb', models.PositiveIntegerField(help_text='Maximum storage space for photos and documents', verbose_name='Maximum Storage (GB)')),
                ('features', models.JSONField(default=dict, help_text='JSON object containing plan features and capabilities', verbose_name='Plan Features')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_popular', models.BooleanField(default=False, help_text='Mark as popular plan for marketing purposes', verbose_name='Is Popular Plan')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_plans', to='tenants.superadmin', verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Subscription Plan',
                'verbose_name_plural': 'Subscription Plans',
                'db_table': 'tenants_subscription_plan',
                'ordering': ['monthly_price_toman'],
            },
        ),
        migrations.CreateModel(
            name='BillingCycle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cycle_type', models.CharField(choices=[('monthly', 'Monthly'), ('yearly', 'Yearly'), ('quarterly', 'Quarterly')], default='monthly', max_length=20, verbose_name='Billing Cycle Type')),
                ('next_billing_date', models.DateField(verbose_name='Next Billing Date (Shamsi)')),
                ('billing_day', models.PositiveIntegerField(default=1, help_text='Day of month to generate invoice (1-30)', verbose_name='Billing Day of Month')),
                ('auto_payment_enabled', models.BooleanField(default=False, verbose_name='Auto Payment Enabled')),
                ('payment_method', models.CharField(blank=True, choices=[('bank_transfer', 'Bank Transfer'), ('cash', 'Cash'), ('cheque', 'Cheque'), ('card', 'Card Payment'), ('online', 'Online Payment')], max_length=20, verbose_name='Default Payment Method')),
                ('grace_period_days', models.PositiveIntegerField(default=7, help_text='Days after due date before suspension', verbose_name='Grace Period (Days)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='billing_cycle', to='tenants.tenant', verbose_name='Tenant')),
            ],
            options={
                'verbose_name': 'Billing Cycle',
                'verbose_name_plural': 'Billing Cycles',
                'db_table': 'tenants_billing_cycle',
            },
        ),
        migrations.AddField(
            model_name='tenant',
            name='subscription_plan_fk',
            field=models.ForeignKey(blank=True, help_text='Current subscription plan for this tenant', null=True, on_delete=django.db.models.deletion.PROTECT, to='tenants.subscriptionplan', verbose_name='Subscription Plan'),
        ),
        migrations.CreateModel(
            name='TenantInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(help_text='Unique invoice number (auto-generated)', max_length=50, unique=True, verbose_name='Invoice Number')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Invoice UUID')),
                ('issue_date_shamsi', models.DateField(help_text='Invoice issue date in Persian calendar', verbose_name='Issue Date (Shamsi)')),
                ('due_date_shamsi', models.DateField(help_text='Payment due date in Persian calendar', verbose_name='Due Date (Shamsi)')),
                ('billing_period_start', models.DateField(help_text='Start date of billing period', verbose_name='Billing Period Start')),
                ('billing_period_end', models.DateField(help_text='End date of billing period', verbose_name='Billing Period End')),
                ('subtotal_toman', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Subtotal (Toman)')),
                ('tax_rate', models.DecimalField(decimal_places=2, default=Decimal('9.00'), help_text='Iranian VAT rate (default 9%)', max_digits=5, verbose_name='Tax Rate (%)')),
                ('tax_amount_toman', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Tax Amount (Toman)')),
                ('discount_amount_toman', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Discount Amount (Toman)')),
                ('total_amount_toman', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Total Amount (Toman)')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Payment'), ('paid', 'Paid'), ('overdue', 'Overdue'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', max_length=20, verbose_name='Invoice Status')),
                ('payment_method', models.CharField(blank=True, choices=[('bank_transfer', 'Bank Transfer'), ('cash', 'Cash'), ('cheque', 'Cheque'), ('card', 'Card Payment'), ('online', 'Online Payment')], max_length=20, verbose_name='Payment Method')),
                ('payment_date_shamsi', models.DateField(blank=True, null=True, verbose_name='Payment Date (Shamsi)')),
                ('payment_reference', models.CharField(blank=True, help_text='Bank transaction ID, cheque number, etc.', max_length=100, verbose_name='Payment Reference')),
                ('bank_name', models.CharField(blank=True, help_text='Iranian bank name for payment', max_length=100, verbose_name='Bank Name')),
                ('account_number', models.CharField(blank=True, help_text='Bank account number for payment', max_length=50, verbose_name='Account Number')),
                ('iban', models.CharField(blank=True, help_text='Iranian IBAN for international transfers', max_length=26, verbose_name='IBAN')),
                ('line_items', models.JSONField(default=list, help_text='JSON array of invoice line items with descriptions and amounts', verbose_name='Invoice Line Items')),
                ('notes', models.TextField(blank=True, help_text='Additional notes or terms in Persian', verbose_name='Invoice Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pdf_generated', models.BooleanField(default=False, verbose_name='PDF Generated')),
                ('pdf_file_path', models.CharField(blank=True, max_length=500, verbose_name='PDF File Path')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_invoices', to='tenants.superadmin', verbose_name='Created By')),
                ('subscription_plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tenants.subscriptionplan', verbose_name='Subscription Plan')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='tenants.tenant', verbose_name='Tenant')),
            ],
            options={
                'verbose_name': 'Tenant Invoice',
                'verbose_name_plural': 'Tenant Invoices',
                'db_table': 'tenants_invoice',
                'ordering': ['-issue_date_shamsi'],
                'indexes': [models.Index(fields=['tenant', 'status'], name='tenants_inv_tenant__50abd5_idx'), models.Index(fields=['invoice_number'], name='tenants_inv_invoice_b03261_idx'), models.Index(fields=['issue_date_shamsi'], name='tenants_inv_issue_d_412371_idx'), models.Index(fields=['due_date_shamsi'], name='tenants_inv_due_dat_964485_idx'), models.Index(fields=['status'], name='tenants_inv_status_8ea065_idx')],
            },
        ),
    ]
