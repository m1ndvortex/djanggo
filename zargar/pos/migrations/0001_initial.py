# Generated by Django 4.2.24 on 2025-09-21 16:31

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('jewelry', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('customers', '0002_add_purchase_order_models'),
    ]

    operations = [
        migrations.CreateModel(
            name='POSTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('transaction_id', models.UUIDField(default=uuid.uuid4, help_text='Unique transaction identifier', unique=True, verbose_name='Transaction ID')),
                ('transaction_number', models.CharField(help_text='Human-readable transaction number', max_length=50, unique=True, verbose_name='Transaction Number')),
                ('transaction_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Transaction Date')),
                ('transaction_date_shamsi', models.CharField(max_length=10, verbose_name='Transaction Date (Shamsi)')),
                ('transaction_type', models.CharField(choices=[('sale', 'Sale'), ('return', 'Return'), ('exchange', 'Exchange'), ('layaway', 'Layaway Payment'), ('installment', 'Installment Payment')], default='sale', max_length=20, verbose_name='Transaction Type')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded'), ('offline_pending', 'Offline Pending Sync')], default='pending', max_length=20, verbose_name='Status')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='Subtotal (Toman)')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Tax Amount (Toman)')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Discount Amount (Toman)')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='Total Amount (Toman)')),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('card', 'Card Payment'), ('bank_transfer', 'Bank Transfer'), ('cheque', 'Cheque'), ('gold_exchange', 'Gold Exchange'), ('mixed', 'Mixed Payment')], default='cash', max_length=20, verbose_name='Payment Method')),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='Amount Paid (Toman)')),
                ('change_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Change Amount (Toman)')),
                ('gold_price_18k_at_transaction', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='18K Gold Price at Transaction (Toman/gram)')),
                ('total_gold_weight_grams', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=10, verbose_name='Total Gold Weight (Grams)')),
                ('is_offline_transaction', models.BooleanField(default=False, help_text='Transaction created while offline', verbose_name='Is Offline Transaction')),
                ('offline_data', models.JSONField(blank=True, default=dict, help_text='Stored transaction data for offline processing', verbose_name='Offline Transaction Data')),
                ('sync_status', models.CharField(choices=[('synced', 'Synced'), ('pending_sync', 'Pending Sync'), ('sync_failed', 'Sync Failed')], default='synced', max_length=20, verbose_name='Sync Status')),
                ('synced_at', models.DateTimeField(blank=True, null=True, verbose_name='Synced At')),
                ('reference_number', models.CharField(blank=True, help_text='External reference number', max_length=100, verbose_name='Reference Number')),
                ('transaction_notes', models.TextField(blank=True, verbose_name='Transaction Notes')),
                ('internal_notes', models.TextField(blank=True, verbose_name='Internal Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pos_transactions', to='customers.customer', verbose_name='Customer')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'POS Transaction',
                'verbose_name_plural': 'POS Transactions',
                'ordering': ['-transaction_date'],
            },
        ),
        migrations.CreateModel(
            name='POSTransactionLineItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('item_name', models.CharField(max_length=200, verbose_name='Item Name')),
                ('item_sku', models.CharField(blank=True, max_length=50, verbose_name='Item SKU')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Unit Price (Toman)')),
                ('line_total', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Line Total (Toman)')),
                ('gold_weight_grams', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Gold Weight (Grams)')),
                ('gold_karat', models.IntegerField(blank=True, null=True, verbose_name='Gold Karat')),
                ('gold_price_per_gram_at_sale', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Gold Price per Gram at Sale (Toman)')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, verbose_name='Discount Percentage')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Discount Amount (Toman)')),
                ('line_notes', models.TextField(blank=True, verbose_name='Line Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('jewelry_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='jewelry.jewelryitem', verbose_name='Jewelry Item')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_items', to='pos.postransaction', verbose_name='POS Transaction')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'POS Transaction Line Item',
                'verbose_name_plural': 'POS Transaction Line Items',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='POSOfflineStorage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage_id', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='Storage ID')),
                ('transaction_data', models.JSONField(help_text='Complete transaction data in JSON format', verbose_name='Transaction Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('device_id', models.CharField(blank=True, help_text='Identifier of the device that created this record', max_length=100, verbose_name='Device ID')),
                ('is_synced', models.BooleanField(default=False, verbose_name='Is Synced')),
                ('synced_at', models.DateTimeField(blank=True, null=True, verbose_name='Synced At')),
                ('sync_error', models.TextField(blank=True, help_text='Error message if sync failed', verbose_name='Sync Error')),
                ('synced_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pos.postransaction', verbose_name='Synced Transaction')),
            ],
            options={
                'verbose_name': 'POS Offline Storage',
                'verbose_name_plural': 'POS Offline Storage',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='POSInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('invoice_number', models.CharField(max_length=50, unique=True, verbose_name='Invoice Number')),
                ('invoice_type', models.CharField(choices=[('sale', 'Sale Invoice'), ('return', 'Return Invoice'), ('proforma', 'Proforma Invoice')], default='sale', max_length=20, verbose_name='Invoice Type')),
                ('issue_date', models.DateField(default=django.utils.timezone.now, verbose_name='Issue Date')),
                ('issue_date_shamsi', models.CharField(max_length=10, verbose_name='Issue Date (Shamsi)')),
                ('due_date', models.DateField(blank=True, null=True, verbose_name='Due Date')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('issued', 'Issued'), ('paid', 'Paid'), ('cancelled', 'Cancelled')], default='draft', max_length=20, verbose_name='Status')),
                ('tax_id', models.CharField(blank=True, help_text='Iranian tax identification number', max_length=20, verbose_name='Tax ID')),
                ('economic_code', models.CharField(blank=True, help_text='Iranian economic code', max_length=20, verbose_name='Economic Code')),
                ('invoice_subtotal', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Invoice Subtotal (Toman)')),
                ('invoice_tax_amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Invoice Tax Amount (Toman)')),
                ('invoice_discount_amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Invoice Discount Amount (Toman)')),
                ('invoice_total_amount', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Invoice Total Amount (Toman)')),
                ('invoice_notes', models.TextField(blank=True, verbose_name='Invoice Notes')),
                ('terms_and_conditions', models.TextField(blank=True, verbose_name='Terms and Conditions')),
                ('email_sent', models.BooleanField(default=False, verbose_name='Email Sent')),
                ('email_sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Email Sent At')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('transaction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='invoice', to='pos.postransaction', verbose_name='POS Transaction')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'POS Invoice',
                'verbose_name_plural': 'POS Invoices',
                'ordering': ['-issue_date'],
            },
        ),
        migrations.AddIndex(
            model_name='postransaction',
            index=models.Index(fields=['transaction_number'], name='pos_postran_transac_9ddd52_idx'),
        ),
        migrations.AddIndex(
            model_name='postransaction',
            index=models.Index(fields=['customer'], name='pos_postran_custome_9bcd0a_idx'),
        ),
        migrations.AddIndex(
            model_name='postransaction',
            index=models.Index(fields=['transaction_date'], name='pos_postran_transac_d9ab60_idx'),
        ),
        migrations.AddIndex(
            model_name='postransaction',
            index=models.Index(fields=['status'], name='pos_postran_status_2f0710_idx'),
        ),
        migrations.AddIndex(
            model_name='postransaction',
            index=models.Index(fields=['transaction_type'], name='pos_postran_transac_38afae_idx'),
        ),
        migrations.AddIndex(
            model_name='postransaction',
            index=models.Index(fields=['is_offline_transaction'], name='pos_postran_is_offl_59c025_idx'),
        ),
        migrations.AddIndex(
            model_name='postransaction',
            index=models.Index(fields=['sync_status'], name='pos_postran_sync_st_d71fbf_idx'),
        ),
        migrations.AddIndex(
            model_name='posofflinestorage',
            index=models.Index(fields=['is_synced'], name='pos_posoffl_is_sync_428006_idx'),
        ),
        migrations.AddIndex(
            model_name='posofflinestorage',
            index=models.Index(fields=['created_at'], name='pos_posoffl_created_14457e_idx'),
        ),
        migrations.AddIndex(
            model_name='posofflinestorage',
            index=models.Index(fields=['device_id'], name='pos_posoffl_device__da93d2_idx'),
        ),
        migrations.AddIndex(
            model_name='posinvoice',
            index=models.Index(fields=['invoice_number'], name='pos_posinvo_invoice_8a2440_idx'),
        ),
        migrations.AddIndex(
            model_name='posinvoice',
            index=models.Index(fields=['transaction'], name='pos_posinvo_transac_d8af1f_idx'),
        ),
        migrations.AddIndex(
            model_name='posinvoice',
            index=models.Index(fields=['status'], name='pos_posinvo_status_c88855_idx'),
        ),
        migrations.AddIndex(
            model_name='posinvoice',
            index=models.Index(fields=['issue_date'], name='pos_posinvo_issue_d_71532f_idx'),
        ),
    ]
