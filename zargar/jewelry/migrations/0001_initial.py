# Generated by Django 4.2.7 on 2025-09-19 00:18

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(max_length=100, verbose_name='Category Name')),
                ('name_persian', models.CharField(max_length=100, verbose_name='Persian Category Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Gemstone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(max_length=100, verbose_name='Gemstone Name')),
                ('gemstone_type', models.CharField(choices=[('diamond', 'Diamond'), ('emerald', 'Emerald'), ('ruby', 'Ruby'), ('sapphire', 'Sapphire'), ('pearl', 'Pearl'), ('other', 'Other')], max_length=20, verbose_name='Gemstone Type')),
                ('carat_weight', models.DecimalField(decimal_places=3, max_digits=8, validators=[django.core.validators.MinValueValidator(0.001)], verbose_name='Carat Weight')),
                ('cut_grade', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('very_good', 'Very Good'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor')], max_length=20, verbose_name='Cut Grade')),
                ('color_grade', models.CharField(blank=True, max_length=10, verbose_name='Color Grade')),
                ('clarity_grade', models.CharField(blank=True, max_length=10, verbose_name='Clarity Grade')),
                ('certification_number', models.CharField(blank=True, max_length=100, verbose_name='Certification Number')),
                ('certification_authority', models.CharField(blank=True, max_length=100, verbose_name='Certification Authority')),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Purchase Price (Toman)')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Gemstone',
                'verbose_name_plural': 'Gemstones',
            },
        ),
        migrations.CreateModel(
            name='JewelryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(max_length=200, verbose_name='Item Name')),
                ('sku', models.CharField(help_text='Stock Keeping Unit - must be unique', max_length=50, unique=True, verbose_name='SKU')),
                ('barcode', models.CharField(blank=True, max_length=100, unique=True, verbose_name='Barcode')),
                ('weight_grams', models.DecimalField(decimal_places=3, max_digits=8, validators=[django.core.validators.MinValueValidator(0.001)], verbose_name='Weight (Grams)')),
                ('karat', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(24)], verbose_name='Gold Karat (عیار)')),
                ('manufacturing_cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Manufacturing Cost (اجرت) - Toman')),
                ('gold_value', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Gold Value (Toman)')),
                ('gemstone_value', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Gemstone Value (Toman)')),
                ('selling_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Selling Price (Toman)')),
                ('status', models.CharField(choices=[('in_stock', 'In Stock'), ('sold', 'Sold'), ('reserved', 'Reserved'), ('repair', 'Under Repair'), ('consignment', 'Consignment')], default='in_stock', max_length=20, verbose_name='Status')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Quantity')),
                ('minimum_stock', models.PositiveIntegerField(default=1, verbose_name='Minimum Stock Level')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('notes', models.TextField(blank=True, verbose_name='Internal Notes')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='jewelry.category', verbose_name='Category')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('gemstones', models.ManyToManyField(blank=True, to='jewelry.gemstone', verbose_name='Gemstones')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Jewelry Item',
                'verbose_name_plural': 'Jewelry Items',
            },
        ),
        migrations.CreateModel(
            name='JewelryItemPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('image', models.FileField(upload_to='jewelry_photos/%Y/%m/', verbose_name='Image')),
                ('caption', models.CharField(blank=True, max_length=200, verbose_name='Caption')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Is Primary Photo')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Display Order')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('jewelry_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='jewelry.jewelryitem', verbose_name='Jewelry Item')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Jewelry Item Photo',
                'verbose_name_plural': 'Jewelry Item Photos',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='jewelryitem',
            index=models.Index(fields=['sku'], name='jewelry_jew_sku_67f1a8_idx'),
        ),
        migrations.AddIndex(
            model_name='jewelryitem',
            index=models.Index(fields=['barcode'], name='jewelry_jew_barcode_b97e13_idx'),
        ),
        migrations.AddIndex(
            model_name='jewelryitem',
            index=models.Index(fields=['status'], name='jewelry_jew_status_1b5aae_idx'),
        ),
        migrations.AddIndex(
            model_name='jewelryitem',
            index=models.Index(fields=['category'], name='jewelry_jew_categor_a3a25b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('name', 'created_at')},
        ),
    ]
