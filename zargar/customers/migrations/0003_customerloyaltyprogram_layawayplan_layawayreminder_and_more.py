# Generated by Django 4.2.24 on 2025-09-21 22:46

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('jewelry', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('customers', '0002_add_purchase_order_models'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerLoyaltyProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(max_length=100, verbose_name='Program Name')),
                ('name_persian', models.CharField(max_length=100, verbose_name='Persian Program Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('description_persian', models.TextField(blank=True, verbose_name='Persian Description')),
                ('program_type', models.CharField(choices=[('points_based', 'Points Based'), ('tier_based', 'Tier Based'), ('hybrid', 'Hybrid (Points + Tiers)')], default='points_based', max_length=20, verbose_name='Program Type')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('points_per_toman', models.DecimalField(decimal_places=2, default=1.0, help_text='How many points customer earns per Toman spent', max_digits=5, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Points per Toman Spent')),
                ('toman_per_point', models.DecimalField(decimal_places=2, default=1.0, help_text='How much each point is worth in Toman when redeemed', max_digits=5, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Toman Value per Point')),
                ('vip_threshold_bronze', models.DecimalField(decimal_places=2, default=10000000, max_digits=12, verbose_name='Bronze VIP Threshold (Toman)')),
                ('vip_threshold_silver', models.DecimalField(decimal_places=2, default=25000000, max_digits=12, verbose_name='Silver VIP Threshold (Toman)')),
                ('vip_threshold_gold', models.DecimalField(decimal_places=2, default=50000000, max_digits=12, verbose_name='Gold VIP Threshold (Toman)')),
                ('vip_threshold_platinum', models.DecimalField(decimal_places=2, default=100000000, max_digits=12, verbose_name='Platinum VIP Threshold (Toman)')),
                ('birthday_bonus_points', models.IntegerField(default=1000, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Birthday Bonus Points')),
                ('anniversary_bonus_points', models.IntegerField(default=500, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Anniversary Bonus Points')),
                ('nowruz_bonus_points', models.IntegerField(default=2000, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Nowruz Bonus Points')),
                ('yalda_bonus_points', models.IntegerField(default=1500, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Yalda Night Bonus Points')),
                ('wedding_bonus_points', models.IntegerField(default=3000, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Wedding Anniversary Bonus Points')),
                ('referral_bonus_points', models.IntegerField(default=2000, help_text='Points awarded for successful customer referrals', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Referral Bonus Points')),
                ('points_expire_months', models.IntegerField(default=24, help_text='Number of months after which unused points expire', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(120)], verbose_name='Points Expiration (Months)')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Customer Loyalty Program',
                'verbose_name_plural': 'Customer Loyalty Programs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LayawayPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('plan_number', models.CharField(max_length=50, unique=True, verbose_name='Plan Number')),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Total Amount (Toman)')),
                ('down_payment', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Down Payment (Toman)')),
                ('remaining_balance', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Remaining Balance (Toman)')),
                ('payment_frequency', models.CharField(choices=[('weekly', 'Weekly'), ('bi_weekly', 'Bi-Weekly'), ('monthly', 'Monthly'), ('custom', 'Custom Schedule')], default='monthly', max_length=20, verbose_name='Payment Frequency')),
                ('installment_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Installment Amount (Toman)')),
                ('number_of_payments', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(120)], verbose_name='Number of Payments')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('start_date_shamsi', models.CharField(blank=True, help_text='Format: 1400/01/01', max_length=10, verbose_name='Start Date (Shamsi)')),
                ('expected_completion_date', models.DateField(verbose_name='Expected Completion Date')),
                ('actual_completion_date', models.DateField(blank=True, null=True, verbose_name='Actual Completion Date')),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('defaulted', 'Defaulted'), ('on_hold', 'On Hold')], default='active', max_length=20, verbose_name='Status')),
                ('payments_made', models.PositiveIntegerField(default=0, verbose_name='Payments Made')),
                ('total_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Paid (Toman)')),
                ('late_payment_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, verbose_name='Late Payment Fee (Toman)')),
                ('grace_period_days', models.PositiveIntegerField(default=7, verbose_name='Grace Period (Days)')),
                ('contract_terms', models.TextField(verbose_name='Contract Terms')),
                ('customer_signature', models.CharField(blank=True, max_length=200, verbose_name='Customer Signature')),
                ('signature_date', models.DateTimeField(blank=True, null=True, verbose_name='Signature Date')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('internal_notes', models.TextField(blank=True, verbose_name='Internal Notes')),
                ('item_reserved', models.BooleanField(default=True, verbose_name='Item Reserved')),
                ('reservation_expiry', models.DateField(blank=True, null=True, verbose_name='Reservation Expiry Date')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='layaway_plans', to='customers.customer', verbose_name='Customer')),
                ('jewelry_item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='layaway_plans', to='jewelry.jewelryitem', verbose_name='Jewelry Item')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Layaway Plan',
                'verbose_name_plural': 'Layaway Plans',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LayawayReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('reminder_type', models.CharField(choices=[('upcoming', 'Upcoming Payment'), ('overdue', 'Overdue Payment'), ('final_notice', 'Final Notice'), ('completion', 'Plan Completion')], max_length=20, verbose_name='Reminder Type')),
                ('scheduled_date', models.DateField(verbose_name='Scheduled Date')),
                ('sent_date', models.DateTimeField(blank=True, null=True, verbose_name='Sent Date')),
                ('delivery_method', models.CharField(choices=[('sms', 'SMS'), ('email', 'Email'), ('phone_call', 'Phone Call'), ('in_person', 'In Person')], default='sms', max_length=20, verbose_name='Delivery Method')),
                ('recipient', models.CharField(help_text='Phone number, email address, etc.', max_length=200, verbose_name='Recipient')),
                ('message_template', models.TextField(verbose_name='Message Template')),
                ('personalized_message', models.TextField(blank=True, verbose_name='Personalized Message')),
                ('is_sent', models.BooleanField(default=False, verbose_name='Is Sent')),
                ('delivery_status', models.CharField(blank=True, max_length=50, verbose_name='Delivery Status')),
                ('customer_responded', models.BooleanField(default=False, verbose_name='Customer Responded')),
                ('response_notes', models.TextField(blank=True, verbose_name='Response Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('layaway_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='customers.layawayplan', verbose_name='Layaway Plan')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Layaway Reminder',
                'verbose_name_plural': 'Layaway Reminders',
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='LayawayRefund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('refund_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Refund Amount (Toman)')),
                ('refund_method', models.CharField(choices=[('cash', 'Cash'), ('bank_transfer', 'Bank Transfer'), ('store_credit', 'Store Credit'), ('cheque', 'Cheque')], default='cash', max_length=20, verbose_name='Refund Method')),
                ('refund_date', models.DateField(default=django.utils.timezone.now, verbose_name='Refund Date')),
                ('authorization_code', models.CharField(blank=True, max_length=50, verbose_name='Authorization Code')),
                ('reason', models.TextField(verbose_name='Refund Reason')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('layaway_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refunds', to='customers.layawayplan', verbose_name='Layaway Plan')),
                ('processed_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Processed By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Layaway Refund',
                'verbose_name_plural': 'Layaway Refunds',
                'ordering': ['-refund_date'],
            },
        ),
        migrations.CreateModel(
            name='LayawayPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Amount (Toman)')),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('bank_transfer', 'Bank Transfer'), ('card', 'Card Payment'), ('cheque', 'Cheque'), ('credit', 'Store Credit')], default='cash', max_length=20, verbose_name='Payment Method')),
                ('payment_date', models.DateField(verbose_name='Payment Date')),
                ('reference_number', models.CharField(blank=True, help_text='Bank transaction ID, cheque number, etc.', max_length=100, verbose_name='Reference Number')),
                ('receipt_number', models.CharField(blank=True, max_length=50, verbose_name='Receipt Number')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('layaway_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='customers.layawayplan', verbose_name='Layaway Plan')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Layaway Payment',
                'verbose_name_plural': 'Layaway Payments',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='LayawayContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(max_length=200, verbose_name='Contract Name')),
                ('contract_type', models.CharField(choices=[('standard', 'Standard Layaway Contract'), ('premium', 'Premium Layaway Contract'), ('custom', 'Custom Contract')], default='standard', max_length=20, verbose_name='Contract Type')),
                ('persian_title', models.CharField(max_length=200, verbose_name='Persian Title')),
                ('contract_template', models.TextField(help_text='Use {{variable}} for dynamic content', verbose_name='Contract Template')),
                ('default_grace_period', models.PositiveIntegerField(default=7, verbose_name='Default Grace Period (Days)')),
                ('late_fee_percentage', models.DecimalField(decimal_places=2, default=Decimal('2.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='Late Fee Percentage')),
                ('cancellation_fee_percentage', models.DecimalField(decimal_places=2, default=Decimal('10.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='Cancellation Fee Percentage')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_default', models.BooleanField(default=False, verbose_name='Is Default Template')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Layaway Contract',
                'verbose_name_plural': 'Layaway Contracts',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CustomerVIPTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('tier', models.CharField(choices=[('regular', 'Regular Customer'), ('bronze', 'Bronze VIP'), ('silver', 'Silver VIP'), ('gold', 'Gold VIP'), ('platinum', 'Platinum VIP')], max_length=20, verbose_name='VIP Tier')),
                ('previous_tier', models.CharField(blank=True, choices=[('regular', 'Regular Customer'), ('bronze', 'Bronze VIP'), ('silver', 'Silver VIP'), ('gold', 'Gold VIP'), ('platinum', 'Platinum VIP')], max_length=20, verbose_name='Previous Tier')),
                ('total_purchases_at_upgrade', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Total Purchases at Upgrade (Toman)')),
                ('points_balance_at_upgrade', models.IntegerField(default=0, verbose_name='Points Balance at Upgrade')),
                ('effective_date', models.DateField(verbose_name='Effective Date')),
                ('expiry_date', models.DateField(blank=True, null=True, verbose_name='Expiry Date')),
                ('is_current', models.BooleanField(default=True, verbose_name='Is Current Tier')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Discount Percentage')),
                ('bonus_points_multiplier', models.DecimalField(decimal_places=2, default=1.0, max_digits=3, verbose_name='Bonus Points Multiplier')),
                ('benefits_used_count', models.IntegerField(default=0, verbose_name='Benefits Used Count')),
                ('total_savings', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Total Savings from Benefits (Toman)')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vip_history', to='customers.customer', verbose_name='Customer')),
                ('loyalty_program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customers.customerloyaltyprogram', verbose_name='Loyalty Program')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Customer VIP Tier',
                'verbose_name_plural': 'Customer VIP Tiers',
                'ordering': ['-effective_date'],
            },
        ),
        migrations.CreateModel(
            name='CustomerSpecialOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('offer_type', models.CharField(choices=[('birthday_discount', 'Birthday Discount'), ('anniversary_gift', 'Anniversary Gift'), ('vip_exclusive', 'VIP Exclusive Offer'), ('seasonal_promotion', 'Seasonal Promotion'), ('clearance_sale', 'Clearance Sale'), ('new_collection', 'New Collection Preview')], max_length=20, verbose_name='Offer Type')),
                ('title', models.CharField(max_length=200, verbose_name='Offer Title')),
                ('title_persian', models.CharField(blank=True, max_length=200, verbose_name='Persian Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('description_persian', models.TextField(blank=True, verbose_name='Persian Description')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Discount Percentage')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Discount Amount (Toman)')),
                ('minimum_purchase', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minimum Purchase Amount (Toman)')),
                ('valid_from', models.DateTimeField(verbose_name='Valid From')),
                ('valid_until', models.DateTimeField(verbose_name='Valid Until')),
                ('max_uses', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Maximum Uses')),
                ('uses_count', models.IntegerField(default=0, verbose_name='Uses Count')),
                ('status', models.CharField(choices=[('active', 'Active'), ('used', 'Used'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='active', max_length=20, verbose_name='Status')),
                ('used_date', models.DateTimeField(blank=True, null=True, verbose_name='Used Date')),
                ('used_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Used Amount (Toman)')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='special_offers', to='customers.customer', verbose_name='Customer')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Customer Special Offer',
                'verbose_name_plural': 'Customer Special Offers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerReferral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('referral_code', models.CharField(max_length=20, unique=True, verbose_name='Referral Code')),
                ('referral_date', models.DateField(verbose_name='Referral Date')),
                ('first_purchase_date', models.DateField(blank=True, null=True, verbose_name='First Purchase Date')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='Status')),
                ('bonus_points_awarded', models.IntegerField(default=0, verbose_name='Bonus Points Awarded')),
                ('reward_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Reward Amount (Toman)')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('referred_customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals_received', to='customers.customer', verbose_name='Referred Customer')),
                ('referrer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals_made', to='customers.customer', verbose_name='Referrer')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Customer Referral',
                'verbose_name_plural': 'Customer Referrals',
                'ordering': ['-referral_date'],
            },
        ),
        migrations.CreateModel(
            name='CustomerEngagementEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('event_type', models.CharField(choices=[('birthday', 'Birthday'), ('anniversary', 'Purchase Anniversary'), ('wedding_anniversary', 'Wedding Anniversary'), ('nowruz', 'Nowruz Greeting'), ('yalda', 'Yalda Night Greeting'), ('mehregan', 'Mehregan Festival'), ('follow_up', 'Follow-up Reminder'), ('special_offer', 'Special Offer'), ('vip_upgrade', 'VIP Tier Upgrade')], max_length=20, verbose_name='Event Type')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('title_persian', models.CharField(blank=True, max_length=200, verbose_name='Persian Title')),
                ('message', models.TextField(verbose_name='Message')),
                ('message_persian', models.TextField(blank=True, verbose_name='Persian Message')),
                ('scheduled_date', models.DateTimeField(verbose_name='Scheduled Date')),
                ('sent_date', models.DateTimeField(blank=True, null=True, verbose_name='Sent Date')),
                ('delivery_method', models.CharField(choices=[('sms', 'SMS'), ('email', 'Email'), ('phone_call', 'Phone Call'), ('in_person', 'In Person'), ('whatsapp', 'WhatsApp')], default='sms', max_length=20, verbose_name='Delivery Method')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='Status')),
                ('is_responded', models.BooleanField(default=False, verbose_name='Customer Responded')),
                ('response_date', models.DateTimeField(blank=True, null=True, verbose_name='Response Date')),
                ('response_notes', models.TextField(blank=True, verbose_name='Response Notes')),
                ('suggested_gifts', models.JSONField(blank=True, default=list, help_text='List of suggested jewelry items for the occasion', verbose_name='Suggested Gifts')),
                ('bonus_points_awarded', models.IntegerField(default=0, verbose_name='Bonus Points Awarded')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engagement_events', to='customers.customer', verbose_name='Customer')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Customer Engagement Event',
                'verbose_name_plural': 'Customer Engagement Events',
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='LayawayScheduledPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('payment_number', models.PositiveIntegerField(verbose_name='Payment Number')),
                ('due_date', models.DateField(verbose_name='Due Date')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Amount (Toman)')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Is Paid')),
                ('paid_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Paid Amount (Toman)')),
                ('paid_date', models.DateField(blank=True, null=True, verbose_name='Paid Date')),
                ('is_overdue', models.BooleanField(default=False, verbose_name='Is Overdue')),
                ('late_fee_applied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, verbose_name='Late Fee Applied (Toman)')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('layaway_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_payments', to='customers.layawayplan', verbose_name='Layaway Plan')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Scheduled Payment',
                'verbose_name_plural': 'Scheduled Payments',
                'ordering': ['due_date'],
                'unique_together': {('layaway_plan', 'payment_number')},
            },
        ),
        migrations.AddIndex(
            model_name='layawayplan',
            index=models.Index(fields=['plan_number'], name='customers_l_plan_nu_065ea3_idx'),
        ),
        migrations.AddIndex(
            model_name='layawayplan',
            index=models.Index(fields=['customer'], name='customers_l_custome_b8f373_idx'),
        ),
        migrations.AddIndex(
            model_name='layawayplan',
            index=models.Index(fields=['status'], name='customers_l_status_3ed5da_idx'),
        ),
        migrations.AddIndex(
            model_name='layawayplan',
            index=models.Index(fields=['start_date'], name='customers_l_start_d_407df6_idx'),
        ),
        migrations.AddIndex(
            model_name='layawayplan',
            index=models.Index(fields=['expected_completion_date'], name='customers_l_expecte_3339a1_idx'),
        ),
        migrations.AddIndex(
            model_name='customerviptier',
            index=models.Index(fields=['customer', 'is_current'], name='customers_c_custome_ac4576_idx'),
        ),
        migrations.AddIndex(
            model_name='customerviptier',
            index=models.Index(fields=['tier'], name='customers_c_tier_3ac98d_idx'),
        ),
        migrations.AddIndex(
            model_name='customerviptier',
            index=models.Index(fields=['effective_date'], name='customers_c_effecti_4155db_idx'),
        ),
        migrations.AddIndex(
            model_name='customerspecialoffer',
            index=models.Index(fields=['customer', 'status'], name='customers_c_custome_1855e2_idx'),
        ),
        migrations.AddIndex(
            model_name='customerspecialoffer',
            index=models.Index(fields=['offer_type'], name='customers_c_offer_t_99869b_idx'),
        ),
        migrations.AddIndex(
            model_name='customerspecialoffer',
            index=models.Index(fields=['valid_from', 'valid_until'], name='customers_c_valid_f_8a0b71_idx'),
        ),
        migrations.AddIndex(
            model_name='customerreferral',
            index=models.Index(fields=['referrer'], name='customers_c_referre_be40f8_idx'),
        ),
        migrations.AddIndex(
            model_name='customerreferral',
            index=models.Index(fields=['referral_code'], name='customers_c_referra_71fe79_idx'),
        ),
        migrations.AddIndex(
            model_name='customerreferral',
            index=models.Index(fields=['status'], name='customers_c_status_d93ccb_idx'),
        ),
        migrations.AddIndex(
            model_name='customerengagementevent',
            index=models.Index(fields=['customer', 'event_type'], name='customers_c_custome_7dcdcc_idx'),
        ),
        migrations.AddIndex(
            model_name='customerengagementevent',
            index=models.Index(fields=['scheduled_date'], name='customers_c_schedul_a7e02d_idx'),
        ),
        migrations.AddIndex(
            model_name='customerengagementevent',
            index=models.Index(fields=['status'], name='customers_c_status_dab84f_idx'),
        ),
    ]
