# Generated by Django 4.2.7 on 2025-09-19 00:18

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('persian_first_name', models.CharField(blank=True, max_length=100, verbose_name='Persian First Name')),
                ('persian_last_name', models.CharField(blank=True, max_length=100, verbose_name='Persian Last Name')),
                ('phone_number', models.CharField(max_length=11, validators=[django.core.validators.RegexValidator(message='Phone number must be in format: 09123456789', regex='^09\\d{9}$')], verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email Address')),
                ('address', models.TextField(blank=True, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('province', models.CharField(blank=True, max_length=100, verbose_name='Province')),
                ('postal_code', models.CharField(blank=True, max_length=10, verbose_name='Postal Code')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth Date (Gregorian)')),
                ('birth_date_shamsi', models.CharField(blank=True, help_text='Format: 1400/01/01', max_length=10, verbose_name='Birth Date (Shamsi)')),
                ('national_id', models.CharField(blank=True, max_length=10, verbose_name='National ID')),
                ('customer_type', models.CharField(choices=[('individual', 'Individual'), ('business', 'Business'), ('vip', 'VIP')], default='individual', max_length=20, verbose_name='Customer Type')),
                ('loyalty_points', models.PositiveIntegerField(default=0, verbose_name='Loyalty Points')),
                ('total_purchases', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Total Purchases (Toman)')),
                ('last_purchase_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Purchase Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_vip', models.BooleanField(default=False, verbose_name='Is VIP Customer')),
                ('internal_notes', models.TextField(blank=True, verbose_name='Internal Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
            },
        ),
        migrations.CreateModel(
            name='CustomerNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('note_type', models.CharField(choices=[('general', 'General Note'), ('complaint', 'Complaint'), ('compliment', 'Compliment'), ('follow_up', 'Follow-up Required'), ('preference', 'Customer Preference')], default='general', max_length=20, verbose_name='Note Type')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('content', models.TextField(verbose_name='Content')),
                ('is_important', models.BooleanField(default=False, verbose_name='Is Important')),
                ('follow_up_date', models.DateField(blank=True, null=True, verbose_name='Follow-up Date')),
                ('is_resolved', models.BooleanField(default=False, verbose_name='Is Resolved')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='customers.customer', verbose_name='Customer')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Customer Note',
                'verbose_name_plural': 'Customer Notes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerLoyaltyTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('points', models.IntegerField(help_text='Positive for earned, negative for redeemed', verbose_name='Points')),
                ('transaction_type', models.CharField(choices=[('earned', 'Points Earned'), ('redeemed', 'Points Redeemed'), ('expired', 'Points Expired'), ('adjusted', 'Manual Adjustment')], max_length=20, verbose_name='Transaction Type')),
                ('reason', models.CharField(blank=True, max_length=200, verbose_name='Reason')),
                ('reference_id', models.CharField(blank=True, help_text='Sale ID, promotion ID, etc.', max_length=100, verbose_name='Reference ID')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_transactions', to='customers.customer', verbose_name='Customer')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Loyalty Transaction',
                'verbose_name_plural': 'Loyalty Transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(max_length=200, verbose_name='Supplier Name')),
                ('persian_name', models.CharField(blank=True, max_length=200, verbose_name='Persian Name')),
                ('supplier_type', models.CharField(choices=[('manufacturer', 'Manufacturer'), ('wholesaler', 'Wholesaler'), ('gemstone_dealer', 'Gemstone Dealer'), ('gold_supplier', 'Gold Supplier'), ('service_provider', 'Service Provider')], max_length=20, verbose_name='Supplier Type')),
                ('contact_person', models.CharField(blank=True, max_length=100, verbose_name='Contact Person')),
                ('phone_number', models.CharField(max_length=15, verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email Address')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('address', models.TextField(blank=True, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('tax_id', models.CharField(blank=True, max_length=20, verbose_name='Tax ID')),
                ('payment_terms', models.CharField(blank=True, max_length=100, verbose_name='Payment Terms')),
                ('credit_limit', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Credit Limit (Toman)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_preferred', models.BooleanField(default=False, verbose_name='Is Preferred Supplier')),
                ('total_orders', models.PositiveIntegerField(default=0, verbose_name='Total Orders')),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Total Order Amount (Toman)')),
                ('last_order_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Order Date')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Supplier',
                'verbose_name_plural': 'Suppliers',
                'indexes': [models.Index(fields=['supplier_type'], name='customers_s_supplie_8100b0_idx'), models.Index(fields=['is_active'], name='customers_s_is_acti_cafb5e_idx'), models.Index(fields=['is_preferred'], name='customers_s_is_pref_77bd4a_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['phone_number'], name='customers_c_phone_n_cabfe1_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['email'], name='customers_c_email_4fdeb3_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['customer_type'], name='customers_c_custome_47da94_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['is_vip'], name='customers_c_is_vip_72cf8e_idx'),
        ),
    ]
