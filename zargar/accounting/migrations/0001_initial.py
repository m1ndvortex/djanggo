# Generated by Django 4.2.24 on 2025-09-19 15:12

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('customers', '0002_add_purchase_order_models'),
    ]

    operations = [
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('account_name', models.CharField(max_length=200, verbose_name='نام حساب (Account Name)')),
                ('account_number', models.CharField(max_length=50, verbose_name='شماره حساب (Account Number)')),
                ('iban', models.CharField(blank=True, help_text='Iranian IBAN format: IR + 24 digits', max_length=26, validators=[django.core.validators.RegexValidator(message='IBAN must be in format: IR followed by 24 digits', regex='^IR\\d{24}$')], verbose_name='شماره شبا (IBAN)')),
                ('bank_name', models.CharField(choices=[('melli', 'بانک ملی ایران (Bank Melli Iran)'), ('saderat', 'بانک صادرات ایران (Bank Saderat Iran)'), ('tejarat', 'بانک تجارت (Bank Tejarat)'), ('mellat', 'بانک ملت (Bank Mellat)'), ('parsian', 'بانک پارسیان (Parsian Bank)'), ('pasargad', 'بانک پاسارگاد (Pasargad Bank)'), ('eghtesad_novin', 'بانک اقتصاد نوین (EN Bank)'), ('saman', 'بانک سامان (Saman Bank)'), ('sina', 'بانک سینا (Sina Bank)'), ('dey', 'بانک دی (Dey Bank)'), ('karafarin', 'بانک کارآفرین (Karafarin Bank)'), ('other', 'سایر (Other)')], max_length=50, verbose_name='نام بانک (Bank Name)')),
                ('bank_branch', models.CharField(blank=True, max_length=200, verbose_name='شعبه (Branch)')),
                ('bank_branch_code', models.CharField(blank=True, max_length=10, verbose_name='کد شعبه (Branch Code)')),
                ('account_type', models.CharField(choices=[('checking', 'حساب جاری (Checking Account)'), ('savings', 'حساب پس\u200cانداز (Savings Account)'), ('term_deposit', 'سپرده مدت\u200cدار (Term Deposit)'), ('loan', 'حساب وام (Loan Account)')], max_length=20, verbose_name='نوع حساب (Account Type)')),
                ('currency', models.CharField(default='IRR', help_text='IRR for Iranian Rial, USD, EUR, etc.', max_length=10, verbose_name='واحد پول (Currency)')),
                ('current_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='موجودی جاری (Current Balance)')),
                ('available_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='موجودی قابل برداشت (Available Balance)')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال (Is Active)')),
                ('is_default', models.BooleanField(default=False, help_text='Default account for transactions', verbose_name='حساب پیش\u200cفرض (Default Account)')),
                ('account_holder_name', models.CharField(max_length=200, verbose_name='نام صاحب حساب (Account Holder Name)')),
                ('account_holder_national_id', models.CharField(blank=True, max_length=10, verbose_name='کد ملی صاحب حساب (Account Holder National ID)')),
                ('opening_date', models.DateField(verbose_name='تاریخ افتتاح (Opening Date)')),
                ('notes', models.TextField(blank=True, verbose_name='یادداشت\u200cها (Notes)')),
            ],
            options={
                'verbose_name': 'حساب بانکی (Bank Account)',
                'verbose_name_plural': 'حساب\u200cهای بانکی (Bank Accounts)',
                'ordering': ['bank_name', 'account_name'],
            },
        ),
        migrations.CreateModel(
            name='ChartOfAccounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('account_code', models.CharField(help_text='Unique account code following Iranian accounting standards', max_length=20, unique=True, verbose_name='کد حساب (Account Code)')),
                ('account_name_persian', models.CharField(help_text='Persian name of the account', max_length=200, verbose_name='نام حساب (Persian Account Name)')),
                ('account_name_english', models.CharField(blank=True, help_text='English name of the account (optional)', max_length=200, verbose_name='English Account Name')),
                ('account_type', models.CharField(choices=[('asset', 'دارایی (Assets)'), ('liability', 'بدهی (Liabilities)'), ('equity', 'حقوق صاحبان سهام (Equity)'), ('revenue', 'درآمد (Revenue)'), ('expense', 'هزینه (Expenses)'), ('cost_of_goods_sold', 'بهای تمام شده کالای فروخته شده (COGS)')], max_length=30, verbose_name='نوع حساب (Account Type)')),
                ('account_category', models.CharField(choices=[('current_assets', 'دارایی\u200cهای جاری (Current Assets)'), ('fixed_assets', 'دارایی\u200cهای ثابت (Fixed Assets)'), ('intangible_assets', 'دارایی\u200cهای نامشهود (Intangible Assets)'), ('current_liabilities', 'بدهی\u200cهای جاری (Current Liabilities)'), ('long_term_liabilities', 'بدهی\u200cهای بلندمدت (Long-term Liabilities)'), ('capital', 'سرمایه (Capital)'), ('retained_earnings', 'سود انباشته (Retained Earnings)'), ('sales_revenue', 'درآمد فروش (Sales Revenue)'), ('other_revenue', 'سایر درآمدها (Other Revenue)'), ('operating_expenses', 'هزینه\u200cهای عملیاتی (Operating Expenses)'), ('administrative_expenses', 'هزینه\u200cهای اداری (Administrative Expenses)'), ('financial_expenses', 'هزینه\u200cهای مالی (Financial Expenses)')], max_length=30, verbose_name='دسته\u200cبندی حساب (Account Category)')),
                ('account_level', models.PositiveIntegerField(default=1, help_text='Hierarchical level (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='سطح حساب (Account Level)')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال (Is Active)')),
                ('is_system_account', models.BooleanField(default=False, help_text='System-generated account that cannot be deleted', verbose_name='حساب سیستمی (System Account)')),
                ('allow_posting', models.BooleanField(default=True, help_text='Whether transactions can be posted to this account', verbose_name='امکان ثبت (Allow Posting)')),
                ('normal_balance', models.CharField(choices=[('debit', 'بدهکار (Debit)'), ('credit', 'بستانکار (Credit)')], max_length=10, verbose_name='مانده طبیعی (Normal Balance)')),
                ('current_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='مانده جاری (Current Balance)')),
                ('description', models.TextField(blank=True, verbose_name='توضیحات (Description)')),
                ('notes', models.TextField(blank=True, verbose_name='یادداشت\u200cها (Notes)')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('parent_account', models.ForeignKey(blank=True, help_text='Parent account for hierarchical structure', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_accounts', to='accounting.chartofaccounts', verbose_name='حساب والد (Parent Account)')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'حساب (Chart of Account)',
                'verbose_name_plural': 'فهرست حساب\u200cها (Chart of Accounts)',
                'ordering': ['account_code'],
            },
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('entry_number', models.CharField(help_text='Unique journal entry number', max_length=50, unique=True, verbose_name='شماره سند (Entry Number)')),
                ('reference_number', models.CharField(blank=True, help_text='External reference number (invoice, receipt, etc.)', max_length=100, verbose_name='شماره مرجع (Reference Number)')),
                ('entry_type', models.CharField(choices=[('general', 'سند عمومی (General Entry)'), ('sales', 'سند فروش (Sales Entry)'), ('purchase', 'سند خرید (Purchase Entry)'), ('payment', 'سند پرداخت (Payment Entry)'), ('receipt', 'سند دریافت (Receipt Entry)'), ('adjustment', 'سند تعدیل (Adjustment Entry)'), ('closing', 'سند اختتامیه (Closing Entry)')], default='general', max_length=20, verbose_name='نوع سند (Entry Type)')),
                ('entry_date', models.DateField(verbose_name='تاریخ سند (Entry Date)')),
                ('entry_date_shamsi', models.CharField(blank=True, help_text='Format: 1402/01/01', max_length=10, verbose_name='تاریخ شمسی (Shamsi Date)')),
                ('description', models.TextField(help_text='Detailed description of the transaction', verbose_name='شرح سند (Description)')),
                ('notes', models.TextField(blank=True, verbose_name='یادداشت\u200cها (Notes)')),
                ('status', models.CharField(choices=[('draft', 'پیش\u200cنویس (Draft)'), ('pending', 'در انتظار تایید (Pending Approval)'), ('posted', 'ثبت شده (Posted)'), ('cancelled', 'لغو شده (Cancelled)')], default='draft', max_length=20, verbose_name='وضعیت (Status)')),
                ('posted_at', models.DateTimeField(blank=True, null=True, verbose_name='زمان ثبت (Posted At)')),
                ('total_debit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='مجموع بدهکار (Total Debit)')),
                ('total_credit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='مجموع بستانکار (Total Credit)')),
                ('source_document_type', models.CharField(blank=True, help_text='Type of source document (invoice, receipt, etc.)', max_length=50, verbose_name='نوع سند مبدا (Source Document Type)')),
                ('source_document_id', models.CharField(blank=True, max_length=100, verbose_name='شناسه سند مبدا (Source Document ID)')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('posted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posted_journal_entries', to=settings.AUTH_USER_MODEL, verbose_name='ثبت شده توسط (Posted By)')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'سند حسابداری (Journal Entry)',
                'verbose_name_plural': 'اسناد حسابداری (Journal Entries)',
                'ordering': ['-entry_date', '-entry_number'],
            },
        ),
        migrations.CreateModel(
            name='JournalEntryLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('line_number', models.PositiveIntegerField(verbose_name='شماره ردیف (Line Number)')),
                ('description', models.CharField(max_length=500, verbose_name='شرح (Description)')),
                ('debit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='مبلغ بدهکار (Debit Amount)')),
                ('credit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='مبلغ بستانکار (Credit Amount)')),
                ('cost_center', models.CharField(blank=True, max_length=100, verbose_name='مرکز هزینه (Cost Center)')),
                ('project_code', models.CharField(blank=True, max_length=50, verbose_name='کد پروژه (Project Code)')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='journal_lines', to='accounting.chartofaccounts', verbose_name='حساب (Account)')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('journal_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='accounting.journalentry', verbose_name='سند حسابداری (Journal Entry)')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'ردیف سند (Journal Entry Line)',
                'verbose_name_plural': 'ردیف\u200cهای سند (Journal Entry Lines)',
                'ordering': ['journal_entry', 'line_number'],
            },
        ),
        migrations.CreateModel(
            name='GeneralLedger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('fiscal_year', models.CharField(help_text='Shamsi fiscal year (e.g., 1402)', max_length=10, verbose_name='سال مالی (Fiscal Year)')),
                ('period_month', models.PositiveIntegerField(help_text='Shamsi month (1-12)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='ماه دوره (Period Month)')),
                ('opening_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='مانده ابتدای دوره (Opening Balance)')),
                ('period_debit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='مجموع بدهکار دوره (Period Debit Total)')),
                ('period_credit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='مجموع بستانکار دوره (Period Credit Total)')),
                ('closing_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='مانده پایان دوره (Closing Balance)')),
                ('is_closed', models.BooleanField(default=False, help_text='Whether this period is closed for posting', verbose_name='بسته شده (Is Closed)')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='زمان بستن (Closed At)')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_ledger_entries', to='accounting.chartofaccounts', verbose_name='حساب (Account)')),
                ('closed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='closed_general_ledger_entries', to=settings.AUTH_USER_MODEL, verbose_name='بسته شده توسط (Closed By)')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'دفتر کل (General Ledger)',
                'verbose_name_plural': 'دفتر کل (General Ledger)',
                'ordering': ['fiscal_year', 'period_month', 'account__account_code'],
            },
        ),
        migrations.CreateModel(
            name='ChequeManagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('cheque_number', models.CharField(max_length=50, verbose_name='شماره چک (Cheque Number)')),
                ('cheque_type', models.CharField(choices=[('issued', 'چک صادره (Issued Cheque)'), ('received', 'چک دریافتی (Received Cheque)')], max_length=20, verbose_name='نوع چک (Cheque Type)')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='مبلغ (Amount)')),
                ('issue_date', models.DateField(verbose_name='تاریخ صدور (Issue Date)')),
                ('due_date', models.DateField(verbose_name='تاریخ سررسید (Due Date)')),
                ('issue_date_shamsi', models.CharField(blank=True, max_length=10, verbose_name='تاریخ صدور شمسی (Shamsi Issue Date)')),
                ('due_date_shamsi', models.CharField(blank=True, max_length=10, verbose_name='تاریخ سررسید شمسی (Shamsi Due Date)')),
                ('payee_name', models.CharField(help_text='Name of the person/company receiving the cheque', max_length=200, verbose_name='نام ذی\u200cنفع (Payee Name)')),
                ('payer_name', models.CharField(blank=True, help_text='Name of the person/company issuing the cheque (for received cheques)', max_length=200, verbose_name='نام پرداخت\u200cکننده (Payer Name)')),
                ('status', models.CharField(choices=[('pending', 'در انتظار (Pending)'), ('presented', 'ارائه شده (Presented)'), ('cleared', 'تسویه شده (Cleared)'), ('bounced', 'برگشتی (Bounced)'), ('cancelled', 'لغو شده (Cancelled)'), ('replaced', 'جایگزین شده (Replaced)')], default='pending', max_length=20, verbose_name='وضعیت (Status)')),
                ('presentation_date', models.DateField(blank=True, null=True, verbose_name='تاریخ ارائه (Presentation Date)')),
                ('clearance_date', models.DateField(blank=True, null=True, verbose_name='تاریخ تسویه (Clearance Date)')),
                ('bounce_date', models.DateField(blank=True, null=True, verbose_name='تاریخ برگشت (Bounce Date)')),
                ('bounce_reason', models.CharField(blank=True, choices=[('insufficient_funds', 'عدم کفایت موجودی (Insufficient Funds)'), ('signature_mismatch', 'عدم تطابق امضا (Signature Mismatch)'), ('account_closed', 'حساب مسدود (Account Closed)'), ('date_issue', 'مشکل تاریخ (Date Issue)'), ('amount_mismatch', 'عدم تطابق مبلغ (Amount Mismatch)'), ('other', 'سایر (Other)')], max_length=30, verbose_name='دلیل برگشت (Bounce Reason)')),
                ('description', models.TextField(blank=True, verbose_name='توضیحات (Description)')),
                ('notes', models.TextField(blank=True, verbose_name='یادداشت\u200cها (Notes)')),
                ('bank_account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cheques', to='accounting.bankaccount', verbose_name='حساب بانکی (Bank Account)')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cheques', to='customers.customer', verbose_name='مشتری (Customer)')),
                ('journal_entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cheques', to='accounting.journalentry', verbose_name='سند حسابداری (Journal Entry)')),
                ('supplier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cheques', to='customers.supplier', verbose_name='تامین\u200cکننده (Supplier)')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'مدیریت چک (Cheque Management)',
                'verbose_name_plural': 'مدیریت چک\u200cها (Cheque Management)',
                'ordering': ['-due_date', '-issue_date'],
            },
        ),
        migrations.AddField(
            model_name='bankaccount',
            name='chart_account',
            field=models.ForeignKey(blank=True, help_text='Corresponding account in chart of accounts', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='bank_accounts', to='accounting.chartofaccounts', verbose_name='حساب در فهرست حساب\u200cها (Chart Account)'),
        ),
        migrations.AddField(
            model_name='bankaccount',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='bankaccount',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.CreateModel(
            name='SubsidiaryLedger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('transaction_date', models.DateField(verbose_name='تاریخ تراکنش (Transaction Date)')),
                ('transaction_date_shamsi', models.CharField(blank=True, max_length=10, verbose_name='تاریخ شمسی (Shamsi Date)')),
                ('description', models.TextField(verbose_name='شرح (Description)')),
                ('reference_number', models.CharField(blank=True, max_length=100, verbose_name='شماره مرجع (Reference Number)')),
                ('debit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='مبلغ بدهکار (Debit Amount)')),
                ('credit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='مبلغ بستانکار (Credit Amount)')),
                ('running_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='مانده جاری (Running Balance)')),
                ('fiscal_year', models.CharField(max_length=10, verbose_name='سال مالی (Fiscal Year)')),
                ('period_month', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='ماه دوره (Period Month)')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subsidiary_ledger_entries', to='accounting.chartofaccounts', verbose_name='حساب (Account)')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('journal_entry_line', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subsidiary_ledger_entry', to='accounting.journalentryline', verbose_name='ردیف سند (Journal Entry Line)')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'دفتر معین (Subsidiary Ledger)',
                'verbose_name_plural': 'دفتر معین (Subsidiary Ledger)',
                'ordering': ['account', 'transaction_date', 'journal_entry_line__journal_entry__entry_number'],
                'indexes': [models.Index(fields=['account', 'transaction_date'], name='accounting__account_084d43_idx'), models.Index(fields=['fiscal_year', 'period_month'], name='accounting__fiscal__4ff6f4_idx'), models.Index(fields=['reference_number'], name='accounting__referen_f98c4b_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='journalentryline',
            index=models.Index(fields=['journal_entry', 'line_number'], name='accounting__journal_9d000e_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentryline',
            index=models.Index(fields=['account'], name='accounting__account_6fdc67_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='journalentryline',
            unique_together={('journal_entry', 'line_number')},
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['entry_number'], name='accounting__entry_n_734b5b_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['entry_date'], name='accounting__entry_d_79c286_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['entry_type'], name='accounting__entry_t_5e6cde_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['status'], name='accounting__status_0a2ff9_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['reference_number'], name='accounting__referen_606a7c_idx'),
        ),
        migrations.AddIndex(
            model_name='generalledger',
            index=models.Index(fields=['account', 'fiscal_year', 'period_month'], name='accounting__account_99f1d5_idx'),
        ),
        migrations.AddIndex(
            model_name='generalledger',
            index=models.Index(fields=['fiscal_year', 'period_month'], name='accounting__fiscal__377f60_idx'),
        ),
        migrations.AddIndex(
            model_name='generalledger',
            index=models.Index(fields=['is_closed'], name='accounting__is_clos_16572c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='generalledger',
            unique_together={('account', 'fiscal_year', 'period_month')},
        ),
        migrations.AddIndex(
            model_name='chequemanagement',
            index=models.Index(fields=['cheque_number'], name='accounting__cheque__8a4588_idx'),
        ),
        migrations.AddIndex(
            model_name='chequemanagement',
            index=models.Index(fields=['cheque_type'], name='accounting__cheque__0efc61_idx'),
        ),
        migrations.AddIndex(
            model_name='chequemanagement',
            index=models.Index(fields=['status'], name='accounting__status_2441cf_idx'),
        ),
        migrations.AddIndex(
            model_name='chequemanagement',
            index=models.Index(fields=['due_date'], name='accounting__due_dat_4abacc_idx'),
        ),
        migrations.AddIndex(
            model_name='chequemanagement',
            index=models.Index(fields=['bank_account'], name='accounting__bank_ac_c75014_idx'),
        ),
        migrations.AddIndex(
            model_name='chartofaccounts',
            index=models.Index(fields=['account_code'], name='accounting__account_2e7f20_idx'),
        ),
        migrations.AddIndex(
            model_name='chartofaccounts',
            index=models.Index(fields=['account_type'], name='accounting__account_7d8a06_idx'),
        ),
        migrations.AddIndex(
            model_name='chartofaccounts',
            index=models.Index(fields=['account_category'], name='accounting__account_69c09e_idx'),
        ),
        migrations.AddIndex(
            model_name='chartofaccounts',
            index=models.Index(fields=['parent_account'], name='accounting__parent__ed8825_idx'),
        ),
        migrations.AddIndex(
            model_name='chartofaccounts',
            index=models.Index(fields=['is_active'], name='accounting__is_acti_066b69_idx'),
        ),
        migrations.AddIndex(
            model_name='bankaccount',
            index=models.Index(fields=['account_number'], name='accounting__account_b65227_idx'),
        ),
        migrations.AddIndex(
            model_name='bankaccount',
            index=models.Index(fields=['iban'], name='accounting__iban_f6fe47_idx'),
        ),
        migrations.AddIndex(
            model_name='bankaccount',
            index=models.Index(fields=['bank_name'], name='accounting__bank_na_2d5c47_idx'),
        ),
        migrations.AddIndex(
            model_name='bankaccount',
            index=models.Index(fields=['is_active'], name='accounting__is_acti_c801ef_idx'),
        ),
        migrations.AddIndex(
            model_name='bankaccount',
            index=models.Index(fields=['is_default'], name='accounting__is_defa_5546e5_idx'),
        ),
    ]
