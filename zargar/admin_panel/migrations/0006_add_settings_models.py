# Generated by Django 4.2.24 on 2025-09-25 13:14

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('admin_panel', '0005_add_rbac_models'),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Unique identifier for this setting', max_length=200, unique=True, verbose_name='Setting Key')),
                ('name', models.CharField(help_text='Human-readable name for this setting', max_length=200, verbose_name='Setting Name')),
                ('description', models.TextField(blank=True, help_text='Detailed description of what this setting controls', verbose_name='Description')),
                ('value', models.TextField(blank=True, help_text='Current value of the setting', verbose_name='Value')),
                ('default_value', models.TextField(blank=True, help_text='Default value for this setting', verbose_name='Default Value')),
                ('setting_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('float', 'Float'), ('boolean', 'Boolean'), ('json', 'JSON'), ('text', 'Text'), ('email', 'Email'), ('url', 'URL'), ('password', 'Password')], default='string', max_length=20, verbose_name='Setting Type')),
                ('category', models.CharField(choices=[('general', 'General'), ('security', 'Security'), ('authentication', 'Authentication'), ('notifications', 'Notifications'), ('backup', 'Backup'), ('integration', 'Integration'), ('performance', 'Performance'), ('localization', 'Localization'), ('ui', 'User Interface'), ('api', 'API')], default='general', max_length=50, verbose_name='Category')),
                ('section', models.CharField(blank=True, help_text='Sub-section within category for organization', max_length=100, verbose_name='Section')),
                ('validation_rules', models.JSONField(blank=True, default=dict, help_text='JSON object containing validation rules', verbose_name='Validation Rules')),
                ('choices', models.JSONField(blank=True, default=list, help_text='List of valid choices for this setting', verbose_name='Choices')),
                ('is_sensitive', models.BooleanField(default=False, help_text='Whether this setting contains sensitive information', verbose_name='Is Sensitive')),
                ('requires_restart', models.BooleanField(default=False, help_text='Whether changing this setting requires system restart', verbose_name='Requires Restart')),
                ('is_readonly', models.BooleanField(default=False, help_text='Whether this setting can be modified through UI', verbose_name='Is Read Only')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this setting is currently active', verbose_name='Is Active')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order for displaying in UI', verbose_name='Display Order')),
                ('help_text', models.TextField(blank=True, help_text='Help text to display in UI', verbose_name='Help Text')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by_id', models.IntegerField(blank=True, help_text='ID of the user who created this setting', null=True, verbose_name='Created By ID')),
                ('created_by_username', models.CharField(blank=True, help_text='Username of the user who created this setting', max_length=150, verbose_name='Created By Username')),
                ('updated_by_id', models.IntegerField(blank=True, help_text='ID of the user who last updated this setting', null=True, verbose_name='Updated By ID')),
                ('updated_by_username', models.CharField(blank=True, help_text='Username of the user who last updated this setting', max_length=150, verbose_name='Updated By Username')),
            ],
            options={
                'verbose_name': 'System Setting',
                'verbose_name_plural': 'System Settings',
                'db_table': 'admin_system_setting',
                'ordering': ['category', 'section', 'display_order', 'name'],
                'indexes': [models.Index(fields=['key'], name='admin_syste_key_0621a0_idx'), models.Index(fields=['category', 'section'], name='admin_syste_categor_fc331c_idx'), models.Index(fields=['is_active', 'category'], name='admin_syste_is_acti_3f41f7_idx'), models.Index(fields=['setting_type', 'category'], name='admin_syste_setting_951b69_idx')],
            },
        ),
        migrations.CreateModel(
            name='NotificationSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Human-readable name for this notification setting', max_length=200, verbose_name='Notification Name')),
                ('event_type', models.CharField(choices=[('security_alert', 'Security Alert'), ('backup_complete', 'Backup Complete'), ('backup_failed', 'Backup Failed'), ('system_error', 'System Error'), ('maintenance_start', 'Maintenance Start'), ('maintenance_end', 'Maintenance End'), ('tenant_created', 'Tenant Created'), ('tenant_suspended', 'Tenant Suspended'), ('payment_failed', 'Payment Failed'), ('storage_full', 'Storage Full'), ('performance_issue', 'Performance Issue'), ('integration_failure', 'Integration Failure')], help_text='Type of event that triggers this notification', max_length=50, verbose_name='Event Type')),
                ('notification_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification'), ('webhook', 'Webhook'), ('slack', 'Slack'), ('telegram', 'Telegram')], help_text='Method of notification delivery', max_length=20, verbose_name='Notification Type')),
                ('recipients', models.JSONField(default=list, help_text='List of recipients (emails, phone numbers, etc.)', verbose_name='Recipients')),
                ('recipient_roles', models.JSONField(blank=True, default=list, help_text='List of user roles that should receive this notification', verbose_name='Recipient Roles')),
                ('conditions', models.JSONField(blank=True, default=dict, help_text='Conditions that must be met for notification to be sent', verbose_name='Conditions')),
                ('priority_threshold', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Minimum priority level to trigger notification', max_length=20, verbose_name='Priority Threshold')),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this notification is currently active', verbose_name='Is Enabled')),
                ('throttle_minutes', models.PositiveIntegerField(default=0, help_text='Minimum minutes between notifications of same type (0 = no throttling)', verbose_name='Throttle Minutes')),
                ('quiet_hours_start', models.TimeField(blank=True, help_text='Start time for quiet hours (no notifications)', null=True, verbose_name='Quiet Hours Start')),
                ('quiet_hours_end', models.TimeField(blank=True, help_text='End time for quiet hours', null=True, verbose_name='Quiet Hours End')),
                ('subject_template', models.CharField(blank=True, help_text='Template for notification subject/title', max_length=500, verbose_name='Subject Template')),
                ('message_template', models.TextField(blank=True, help_text='Template for notification message body', verbose_name='Message Template')),
                ('template_variables', models.JSONField(blank=True, default=dict, help_text='Available variables for use in templates', verbose_name='Template Variables')),
                ('delivery_config', models.JSONField(blank=True, default=dict, help_text='Provider-specific configuration (SMTP settings, API keys, etc.)', verbose_name='Delivery Configuration')),
                ('retry_attempts', models.PositiveIntegerField(default=3, help_text='Number of times to retry failed deliveries', verbose_name='Retry Attempts')),
                ('retry_delay_minutes', models.PositiveIntegerField(default=5, help_text='Minutes to wait between retry attempts', verbose_name='Retry Delay Minutes')),
                ('total_sent', models.PositiveIntegerField(default=0, help_text='Total number of notifications sent', verbose_name='Total Sent')),
                ('total_failed', models.PositiveIntegerField(default=0, help_text='Total number of failed deliveries', verbose_name='Total Failed')),
                ('last_sent_at', models.DateTimeField(blank=True, help_text='When this notification was last sent', null=True, verbose_name='Last Sent At')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by_id', models.IntegerField(blank=True, help_text='ID of the user who created this notification setting', null=True, verbose_name='Created By ID')),
                ('created_by_username', models.CharField(blank=True, help_text='Username of the user who created this notification setting', max_length=150, verbose_name='Created By Username')),
            ],
            options={
                'verbose_name': 'Notification Setting',
                'verbose_name_plural': 'Notification Settings',
                'db_table': 'admin_notification_setting',
                'ordering': ['event_type', 'notification_type', 'name'],
                'indexes': [models.Index(fields=['event_type', 'is_enabled'], name='admin_notif_event_t_f74084_idx'), models.Index(fields=['notification_type', 'is_enabled'], name='admin_notif_notific_cd466e_idx'), models.Index(fields=['is_enabled', 'priority_threshold'], name='admin_notif_is_enab_9fb858_idx')],
                'unique_together': {('event_type', 'notification_type', 'name')},
            },
        ),
        migrations.CreateModel(
            name='SettingChangeHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_value', models.TextField(blank=True, verbose_name='Old Value')),
                ('new_value', models.TextField(blank=True, verbose_name='New Value')),
                ('change_reason', models.CharField(blank=True, help_text='Reason for the change', max_length=500, verbose_name='Change Reason')),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('changed_by_id', models.IntegerField(blank=True, null=True, verbose_name='Changed By ID')),
                ('changed_by_username', models.CharField(blank=True, max_length=150, verbose_name='Changed By Username')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('setting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='change_history', to='admin_panel.systemsetting', verbose_name='Setting')),
            ],
            options={
                'verbose_name': 'Setting Change History',
                'verbose_name_plural': 'Setting Change History',
                'db_table': 'admin_setting_change_history',
                'ordering': ['-changed_at'],
                'indexes': [models.Index(fields=['setting', 'changed_at'], name='admin_setti_setting_84715c_idx'), models.Index(fields=['changed_by_id', 'changed_at'], name='admin_setti_changed_b497ca_idx')],
            },
        ),
    ]
