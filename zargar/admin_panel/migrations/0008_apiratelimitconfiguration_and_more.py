# Generated by Django 4.2.24 on 2025-09-25 19:45

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('admin_panel', '0007_security_policy_models'),
    ]

    operations = [
        migrations.CreateModel(
            name='APIRateLimitConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config_id', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='Configuration ID')),
                ('name', models.CharField(help_text='Human-readable name for this rate limit configuration', max_length=200, verbose_name='Configuration Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('limit_type', models.CharField(choices=[('global', 'Global Limit'), ('per_user', 'Per User Limit'), ('per_ip', 'Per IP Limit'), ('per_endpoint', 'Per Endpoint Limit'), ('per_tenant', 'Per Tenant Limit')], max_length=20, verbose_name='Limit Type')),
                ('endpoint_pattern', models.CharField(blank=True, help_text='URL pattern to match (regex supported)', max_length=500, verbose_name='Endpoint Pattern')),
                ('requests_limit', models.PositiveIntegerField(help_text='Maximum number of requests allowed', verbose_name='Requests Limit')),
                ('time_window_seconds', models.PositiveIntegerField(choices=[(60, 'Per Minute'), (3600, 'Per Hour'), (86400, 'Per Day'), (604800, 'Per Week'), (2592000, 'Per Month')], help_text='Time window for the rate limit', verbose_name='Time Window')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('block_duration_seconds', models.PositiveIntegerField(default=3600, help_text='How long to block after limit exceeded', verbose_name='Block Duration (seconds)')),
                ('warning_threshold_percentage', models.PositiveIntegerField(default=80, help_text='Percentage of limit to trigger warning', verbose_name='Warning Threshold (%)')),
                ('custom_error_message', models.TextField(blank=True, help_text='Custom message to show when rate limit exceeded', verbose_name='Custom Error Message')),
                ('custom_headers', models.JSONField(blank=True, default=dict, help_text='Additional headers to include in rate limit responses', verbose_name='Custom Headers')),
                ('exempt_user_ids', models.JSONField(blank=True, default=list, help_text='List of user IDs exempt from this rate limit', verbose_name='Exempt User IDs')),
                ('exempt_ip_addresses', models.JSONField(blank=True, default=list, help_text='List of IP addresses exempt from this rate limit', verbose_name='Exempt IP Addresses')),
                ('total_requests_blocked', models.BigIntegerField(default=0, verbose_name='Total Requests Blocked')),
                ('total_warnings_issued', models.BigIntegerField(default=0, verbose_name='Total Warnings Issued')),
                ('last_triggered', models.DateTimeField(blank=True, null=True, verbose_name='Last Triggered')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by_id', models.IntegerField(blank=True, null=True, verbose_name='Created By ID')),
                ('created_by_username', models.CharField(blank=True, max_length=150, verbose_name='Created By Username')),
            ],
            options={
                'verbose_name': 'API Rate Limit Configuration',
                'verbose_name_plural': 'API Rate Limit Configurations',
                'db_table': 'admin_api_rate_limit_config',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ExternalServiceConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for this service configuration', unique=True, verbose_name='Service ID')),
                ('name', models.CharField(help_text='Human-readable name for this service', max_length=200, verbose_name='Service Name')),
                ('service_type', models.CharField(choices=[('gold_price_api', 'Gold Price API'), ('payment_gateway', 'Payment Gateway'), ('sms_service', 'SMS Service'), ('email_service', 'Email Service'), ('backup_storage', 'Backup Storage'), ('analytics_service', 'Analytics Service'), ('notification_service', 'Notification Service'), ('custom', 'Custom Service')], max_length=50, verbose_name='Service Type')),
                ('description', models.TextField(blank=True, help_text='Description of what this service does', verbose_name='Description')),
                ('base_url', models.URLField(help_text='Base URL for the external service API', verbose_name='Base URL')),
                ('timeout_seconds', models.PositiveIntegerField(default=30, help_text='Request timeout in seconds', verbose_name='Timeout (seconds)')),
                ('max_retries', models.PositiveIntegerField(default=3, help_text='Maximum number of retry attempts', verbose_name='Max Retries')),
                ('authentication_type', models.CharField(choices=[('api_key', 'API Key'), ('bearer_token', 'Bearer Token'), ('basic_auth', 'Basic Authentication'), ('oauth2', 'OAuth 2.0'), ('custom_header', 'Custom Header'), ('none', 'No Authentication')], default='api_key', max_length=20, verbose_name='Authentication Type')),
                ('api_key', models.CharField(blank=True, help_text='API key for authentication (encrypted)', max_length=500, verbose_name='API Key')),
                ('username', models.CharField(blank=True, help_text='Username for basic authentication', max_length=200, verbose_name='Username')),
                ('password', models.CharField(blank=True, help_text='Password for basic authentication (encrypted)', max_length=500, verbose_name='Password')),
                ('oauth_client_id', models.CharField(blank=True, max_length=200, verbose_name='OAuth Client ID')),
                ('oauth_client_secret', models.CharField(blank=True, help_text='OAuth client secret (encrypted)', max_length=500, verbose_name='OAuth Client Secret')),
                ('custom_headers', models.JSONField(blank=True, default=dict, help_text='Additional headers to send with requests', verbose_name='Custom Headers')),
                ('rate_limit_requests', models.PositiveIntegerField(default=100, help_text='Maximum requests per time window', verbose_name='Rate Limit (requests)')),
                ('rate_limit_window_seconds', models.PositiveIntegerField(default=3600, help_text='Time window for rate limiting in seconds', verbose_name='Rate Limit Window (seconds)')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('testing', 'Testing'), ('error', 'Error'), ('maintenance', 'Maintenance')], default='inactive', max_length=20, verbose_name='Status')),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this service is enabled for use', verbose_name='Is Enabled')),
                ('last_health_check', models.DateTimeField(blank=True, null=True, verbose_name='Last Health Check')),
                ('health_check_interval_minutes', models.PositiveIntegerField(default=15, help_text='How often to check service health', verbose_name='Health Check Interval (minutes)')),
                ('last_error_message', models.TextField(blank=True, verbose_name='Last Error Message')),
                ('last_error_time', models.DateTimeField(blank=True, null=True, verbose_name='Last Error Time')),
                ('total_requests', models.BigIntegerField(default=0, help_text='Total number of requests made to this service', verbose_name='Total Requests')),
                ('successful_requests', models.BigIntegerField(default=0, verbose_name='Successful Requests')),
                ('failed_requests', models.BigIntegerField(default=0, verbose_name='Failed Requests')),
                ('average_response_time_ms', models.FloatField(default=0.0, verbose_name='Average Response Time (ms)')),
                ('configuration', models.JSONField(blank=True, default=dict, help_text='Service-specific configuration parameters', verbose_name='Service Configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by_id', models.IntegerField(blank=True, null=True, verbose_name='Created By ID')),
                ('created_by_username', models.CharField(blank=True, max_length=150, verbose_name='Created By Username')),
            ],
            options={
                'verbose_name': 'External Service Configuration',
                'verbose_name_plural': 'External Service Configurations',
                'db_table': 'admin_external_service_config',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='IntegrationHealthCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_id', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='Check ID')),
                ('check_type', models.CharField(choices=[('connectivity', 'Connectivity Check'), ('authentication', 'Authentication Check'), ('functionality', 'Functionality Check'), ('performance', 'Performance Check'), ('data_integrity', 'Data Integrity Check')], max_length=20, verbose_name='Check Type')),
                ('status', models.CharField(choices=[('healthy', 'Healthy'), ('warning', 'Warning'), ('critical', 'Critical'), ('unknown', 'Unknown')], max_length=20, verbose_name='Status')),
                ('response_time_ms', models.FloatField(blank=True, null=True, verbose_name='Response Time (ms)')),
                ('success', models.BooleanField(help_text='Whether the health check was successful', verbose_name='Success')),
                ('details', models.JSONField(blank=True, default=dict, help_text='Detailed information about the health check', verbose_name='Check Details')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('warnings', models.JSONField(blank=True, default=list, help_text='List of warning messages from the health check', verbose_name='Warnings')),
                ('metrics', models.JSONField(blank=True, default=dict, help_text='Performance and other metrics from the health check', verbose_name='Metrics')),
                ('checked_at', models.DateTimeField(auto_now_add=True, verbose_name='Checked At')),
                ('next_check_at', models.DateTimeField(blank=True, null=True, verbose_name='Next Check At')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_checks', to='admin_panel.externalserviceconfiguration', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Integration Health Check',
                'verbose_name_plural': 'Integration Health Checks',
                'db_table': 'admin_integration_health_check',
                'ordering': ['-checked_at'],
            },
        ),
        migrations.AddIndex(
            model_name='externalserviceconfiguration',
            index=models.Index(fields=['service_type', 'status'], name='admin_exter_service_946dec_idx'),
        ),
        migrations.AddIndex(
            model_name='externalserviceconfiguration',
            index=models.Index(fields=['is_enabled', 'status'], name='admin_exter_is_enab_863c5f_idx'),
        ),
        migrations.AddIndex(
            model_name='externalserviceconfiguration',
            index=models.Index(fields=['last_health_check'], name='admin_exter_last_he_05cfe8_idx'),
        ),
        migrations.AddIndex(
            model_name='externalserviceconfiguration',
            index=models.Index(fields=['service_id'], name='admin_exter_service_965cb3_idx'),
        ),
        migrations.AddIndex(
            model_name='apiratelimitconfiguration',
            index=models.Index(fields=['limit_type', 'is_active'], name='admin_api_r_limit_t_d10717_idx'),
        ),
        migrations.AddIndex(
            model_name='apiratelimitconfiguration',
            index=models.Index(fields=['endpoint_pattern'], name='admin_api_r_endpoin_ca8678_idx'),
        ),
        migrations.AddIndex(
            model_name='apiratelimitconfiguration',
            index=models.Index(fields=['is_active', 'last_triggered'], name='admin_api_r_is_acti_288d2c_idx'),
        ),
        migrations.AddIndex(
            model_name='apiratelimitconfiguration',
            index=models.Index(fields=['config_id'], name='admin_api_r_config__341b4e_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationhealthcheck',
            index=models.Index(fields=['service', 'checked_at'], name='admin_integ_service_dca80b_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationhealthcheck',
            index=models.Index(fields=['status', 'checked_at'], name='admin_integ_status_77303d_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationhealthcheck',
            index=models.Index(fields=['check_type', 'status'], name='admin_integ_check_t_95d830_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationhealthcheck',
            index=models.Index(fields=['next_check_at'], name='admin_integ_next_ch_323a11_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationhealthcheck',
            index=models.Index(fields=['check_id'], name='admin_integ_check_i_63d79b_idx'),
        ),
    ]
